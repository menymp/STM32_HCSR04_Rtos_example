
UltrasonicRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003f80  08003f80  00013f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08003f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          00000e88  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000efc  20000efc  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f246  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003dcc  00000000  00000000  0003f2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009eed  00000000  00000000  000430b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e10  00000000  00000000  0004cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001288  00000000  00000000  0004ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008326  00000000  00000000  0004f040  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000054a6  00000000  00000000  00057366  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005c80c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002cb8  00000000  00000000  0005c888  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e94 	.word	0x08003e94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003e94 	.word	0x08003e94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_Init+0x20>)
{
 8000aa6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f81b 	bl	8000aec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f002 fbca 	bl	8003250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f002 fba8 	bl	8003210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	bd08      	pop	{r3, pc}
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ac8:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <HAL_IncTick+0x10>)
 8000aca:	4b04      	ldr	r3, [pc, #16]	; (8000adc <HAL_IncTick+0x14>)
 8000acc:	6811      	ldr	r1, [r2, #0]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	440b      	add	r3, r1
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000df4 	.word	0x20000df4
 8000adc:	20000000 	.word	0x20000000

08000ae0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000ae0:	4b01      	ldr	r3, [pc, #4]	; (8000ae8 <HAL_GetTick+0x8>)
 8000ae2:	6818      	ldr	r0, [r3, #0]
}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000df4 	.word	0x20000df4

08000aec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000aee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000af4:	041b      	lsls	r3, r3, #16
 8000af6:	0c1b      	lsrs	r3, r3, #16
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000afc:	0200      	lsls	r0, r0, #8
 8000afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b02:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b06:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b08:	60d3      	str	r3, [r2, #12]
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b12:	b530      	push	{r4, r5, lr}
 8000b14:	68dc      	ldr	r4, [r3, #12]
 8000b16:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	2b04      	cmp	r3, #4
 8000b22:	bf28      	it	cs
 8000b24:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	f04f 0501 	mov.w	r5, #1
 8000b2c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b30:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b34:	bf8c      	ite	hi
 8000b36:	3c03      	subhi	r4, #3
 8000b38:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3a:	4019      	ands	r1, r3
 8000b3c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3e:	fa05 f404 	lsl.w	r4, r5, r4
 8000b42:	3c01      	subs	r4, #1
 8000b44:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	ea42 0201 	orr.w	r2, r2, r1
 8000b4c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	bfaf      	iteee	ge
 8000b52:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	f000 000f 	andlt.w	r0, r0, #15
 8000b5a:	4b06      	ldrlt	r3, [pc, #24]	; (8000b74 <HAL_NVIC_SetPriority+0x64>)
 8000b5c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	bfa5      	ittet	ge
 8000b60:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000b64:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b6c:	bd30      	pop	{r4, r5, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	e000ed14 	.word	0xe000ed14

08000b78 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b78:	0942      	lsrs	r2, r0, #5
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	f000 001f 	and.w	r0, r0, #31
 8000b80:	fa03 f000 	lsl.w	r0, r3, r0
 8000b84:	4b01      	ldr	r3, [pc, #4]	; (8000b8c <HAL_NVIC_EnableIRQ+0x14>)
 8000b86:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b94:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b96:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b98:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000d00 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b9c:	4a56      	ldr	r2, [pc, #344]	; (8000cf8 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b9e:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000ba0:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000ba4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ba6:	9c01      	ldr	r4, [sp, #4]
 8000ba8:	40dc      	lsrs	r4, r3
 8000baa:	d102      	bne.n	8000bb2 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000bac:	b005      	add	sp, #20
 8000bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bb2:	2401      	movs	r4, #1
 8000bb4:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000bb8:	9c01      	ldr	r4, [sp, #4]
 8000bba:	ea14 050a 	ands.w	r5, r4, sl
 8000bbe:	f000 8093 	beq.w	8000ce8 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc2:	684c      	ldr	r4, [r1, #4]
 8000bc4:	f024 0b10 	bic.w	fp, r4, #16
 8000bc8:	f1bb 0f02 	cmp.w	fp, #2
 8000bcc:	d111      	bne.n	8000bf2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000bce:	08df      	lsrs	r7, r3, #3
 8000bd0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bd4:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000bd8:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bda:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000bde:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000be2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000be6:	690e      	ldr	r6, [r1, #16]
 8000be8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000bec:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000bf0:	623e      	str	r6, [r7, #32]
 8000bf2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bf6:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000bf8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bfa:	fa07 f70c 	lsl.w	r7, r7, ip
 8000bfe:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c00:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c04:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c06:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c0a:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c0e:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c12:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000c16:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c18:	d811      	bhi.n	8000c3e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000c1a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c1c:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c20:	68ce      	ldr	r6, [r1, #12]
 8000c22:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000c26:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000c2a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c2c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c2e:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c32:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000c36:	409e      	lsls	r6, r3
 8000c38:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000c3c:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c3e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c40:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c42:	688e      	ldr	r6, [r1, #8]
 8000c44:	fa06 f60c 	lsl.w	r6, r6, ip
 8000c48:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4a:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000c4c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c4e:	d54b      	bpl.n	8000ce8 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c50:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000c54:	f046 0601 	orr.w	r6, r6, #1
 8000c58:	f8c8 6018 	str.w	r6, [r8, #24]
 8000c5c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000c60:	f023 0703 	bic.w	r7, r3, #3
 8000c64:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c68:	f006 0601 	and.w	r6, r6, #1
 8000c6c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000c70:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c72:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000c78:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c7a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000c7e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c82:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000c86:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c8a:	d02f      	beq.n	8000cec <HAL_GPIO_Init+0x15c>
 8000c8c:	4e1b      	ldr	r6, [pc, #108]	; (8000cfc <HAL_GPIO_Init+0x16c>)
 8000c8e:	42b0      	cmp	r0, r6
 8000c90:	d02e      	beq.n	8000cf0 <HAL_GPIO_Init+0x160>
 8000c92:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c96:	42b0      	cmp	r0, r6
 8000c98:	d02c      	beq.n	8000cf4 <HAL_GPIO_Init+0x164>
 8000c9a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000c9e:	42b0      	cmp	r0, r6
 8000ca0:	bf14      	ite	ne
 8000ca2:	2605      	movne	r6, #5
 8000ca4:	2603      	moveq	r6, #3
 8000ca6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000caa:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cae:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000cb0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000cb2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000cb8:	bf0c      	ite	eq
 8000cba:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000cbc:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000cbe:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000cc0:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000cc6:	bf0c      	ite	eq
 8000cc8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000cca:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000ccc:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000cce:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000cd4:	bf0c      	ite	eq
 8000cd6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000cd8:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000cda:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000cdc:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cde:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ce0:	bf54      	ite	pl
 8000ce2:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000ce4:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000ce6:	60d6      	str	r6, [r2, #12]
    position++;
 8000ce8:	3301      	adds	r3, #1
 8000cea:	e75c      	b.n	8000ba6 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cec:	2600      	movs	r6, #0
 8000cee:	e7da      	b.n	8000ca6 <HAL_GPIO_Init+0x116>
 8000cf0:	2601      	movs	r6, #1
 8000cf2:	e7d8      	b.n	8000ca6 <HAL_GPIO_Init+0x116>
 8000cf4:	2602      	movs	r6, #2
 8000cf6:	e7d6      	b.n	8000ca6 <HAL_GPIO_Init+0x116>
 8000cf8:	40010400 	.word	0x40010400
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d04:	6903      	ldr	r3, [r0, #16]
 8000d06:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d08:	bf14      	ite	ne
 8000d0a:	2001      	movne	r0, #1
 8000d0c:	2000      	moveq	r0, #0
 8000d0e:	4770      	bx	lr

08000d10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d10:	b10a      	cbz	r2, 8000d16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d12:	6181      	str	r1, [r0, #24]
 8000d14:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d16:	6281      	str	r1, [r0, #40]	; 0x28
 8000d18:	4770      	bx	lr

08000d1a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000d1a:	6943      	ldr	r3, [r0, #20]
 8000d1c:	4059      	eors	r1, r3
 8000d1e:	6141      	str	r1, [r0, #20]
 8000d20:	4770      	bx	lr
	...

08000d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d28:	4605      	mov	r5, r0
 8000d2a:	b918      	cbnz	r0, 8000d34 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000d2c:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000d2e:	b002      	add	sp, #8
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d34:	6803      	ldr	r3, [r0, #0]
 8000d36:	07da      	lsls	r2, r3, #31
 8000d38:	d411      	bmi.n	8000d5e <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d3a:	682b      	ldr	r3, [r5, #0]
 8000d3c:	079b      	lsls	r3, r3, #30
 8000d3e:	f100 8085 	bmi.w	8000e4c <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	071c      	lsls	r4, r3, #28
 8000d46:	f100 80f6 	bmi.w	8000f36 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d4a:	682b      	ldr	r3, [r5, #0]
 8000d4c:	0758      	lsls	r0, r3, #29
 8000d4e:	f100 813f 	bmi.w	8000fd0 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d52:	69ea      	ldr	r2, [r5, #28]
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 81d6 	bne.w	8001106 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	e7e7      	b.n	8000d2e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d5e:	4cba      	ldr	r4, [pc, #744]	; (8001048 <HAL_RCC_OscConfig+0x324>)
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d007      	beq.n	8000d7a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d6a:	6863      	ldr	r3, [r4, #4]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d116      	bne.n	8000da2 <HAL_RCC_OscConfig+0x7e>
 8000d74:	6863      	ldr	r3, [r4, #4]
 8000d76:	03df      	lsls	r7, r3, #15
 8000d78:	d513      	bpl.n	8000da2 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d82:	6821      	ldr	r1, [r4, #0]
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	f003 031f 	and.w	r3, r3, #31
 8000d90:	2201      	movs	r2, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	420b      	tst	r3, r1
 8000d98:	d0cf      	beq.n	8000d3a <HAL_RCC_OscConfig+0x16>
 8000d9a:	686b      	ldr	r3, [r5, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1cc      	bne.n	8000d3a <HAL_RCC_OscConfig+0x16>
 8000da0:	e7c4      	b.n	8000d2c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da2:	686a      	ldr	r2, [r5, #4]
 8000da4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000da8:	d125      	bne.n	8000df6 <HAL_RCC_OscConfig+0xd2>
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db0:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000db2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000db4:	68a9      	ldr	r1, [r5, #8]
 8000db6:	f023 030f 	bic.w	r3, r3, #15
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dbe:	b352      	cbz	r2, 8000e16 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fe8e 	bl	8000ae0 <HAL_GetTick>
 8000dc4:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000dc8:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	2701      	movs	r7, #1
 8000dcc:	fa96 f3a6 	rbit	r3, r6
 8000dd0:	6822      	ldr	r2, [r4, #0]
 8000dd2:	fa96 f3a6 	rbit	r3, r6
 8000dd6:	fab3 f383 	clz	r3, r3
 8000dda:	f003 031f 	and.w	r3, r3, #31
 8000dde:	fa07 f303 	lsl.w	r3, r7, r3
 8000de2:	4213      	tst	r3, r2
 8000de4:	d1a9      	bne.n	8000d3a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de6:	f7ff fe7b 	bl	8000ae0 <HAL_GetTick>
 8000dea:	eba0 0008 	sub.w	r0, r0, r8
 8000dee:	2864      	cmp	r0, #100	; 0x64
 8000df0:	d9ec      	bls.n	8000dcc <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000df2:	2003      	movs	r0, #3
 8000df4:	e79b      	b.n	8000d2e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	b932      	cbnz	r2, 8000e08 <HAL_RCC_OscConfig+0xe4>
 8000dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfe:	6023      	str	r3, [r4, #0]
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e06:	e7d3      	b.n	8000db0 <HAL_RCC_OscConfig+0x8c>
 8000e08:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000e0c:	d1f5      	bne.n	8000dfa <HAL_RCC_OscConfig+0xd6>
 8000e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e12:	6023      	str	r3, [r4, #0]
 8000e14:	e7c9      	b.n	8000daa <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000e16:	f7ff fe63 	bl	8000ae0 <HAL_GetTick>
 8000e1a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000e1e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e20:	2701      	movs	r7, #1
 8000e22:	fa96 f3a6 	rbit	r3, r6
 8000e26:	6822      	ldr	r2, [r4, #0]
 8000e28:	fa96 f3a6 	rbit	r3, r6
 8000e2c:	fab3 f383 	clz	r3, r3
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	fa07 f303 	lsl.w	r3, r7, r3
 8000e38:	4213      	tst	r3, r2
 8000e3a:	f43f af7e 	beq.w	8000d3a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e3e:	f7ff fe4f 	bl	8000ae0 <HAL_GetTick>
 8000e42:	eba0 0008 	sub.w	r0, r0, r8
 8000e46:	2864      	cmp	r0, #100	; 0x64
 8000e48:	d9eb      	bls.n	8000e22 <HAL_RCC_OscConfig+0xfe>
 8000e4a:	e7d2      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e4c:	4c7e      	ldr	r4, [pc, #504]	; (8001048 <HAL_RCC_OscConfig+0x324>)
 8000e4e:	6863      	ldr	r3, [r4, #4]
 8000e50:	f013 0f0c 	tst.w	r3, #12
 8000e54:	d007      	beq.n	8000e66 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e56:	6863      	ldr	r3, [r4, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d122      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x182>
 8000e60:	6863      	ldr	r3, [r4, #4]
 8000e62:	03de      	lsls	r6, r3, #15
 8000e64:	d41f      	bmi.n	8000ea6 <HAL_RCC_OscConfig+0x182>
 8000e66:	2302      	movs	r3, #2
 8000e68:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6c:	6821      	ldr	r1, [r4, #0]
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	fab3 f383 	clz	r3, r3
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	420b      	tst	r3, r1
 8000e82:	d003      	beq.n	8000e8c <HAL_RCC_OscConfig+0x168>
 8000e84:	692b      	ldr	r3, [r5, #16]
 8000e86:	4293      	cmp	r3, r2
 8000e88:	f47f af50 	bne.w	8000d2c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	6821      	ldr	r1, [r4, #0]
 8000e8e:	23f8      	movs	r3, #248	; 0xf8
 8000e90:	fa93 f3a3 	rbit	r3, r3
 8000e94:	fab3 f283 	clz	r2, r3
 8000e98:	696b      	ldr	r3, [r5, #20]
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	6023      	str	r3, [r4, #0]
 8000ea4:	e74d      	b.n	8000d42 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea6:	692a      	ldr	r2, [r5, #16]
 8000ea8:	2601      	movs	r6, #1
 8000eaa:	b30a      	cbz	r2, 8000ef0 <HAL_RCC_OscConfig+0x1cc>
 8000eac:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000eb0:	fab3 f383 	clz	r3, r3
 8000eb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	2702      	movs	r7, #2
 8000ec0:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000ec2:	f7ff fe0d 	bl	8000ae0 <HAL_GetTick>
 8000ec6:	4680      	mov	r8, r0
 8000ec8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ecc:	6822      	ldr	r2, [r4, #0]
 8000ece:	fa97 f3a7 	rbit	r3, r7
 8000ed2:	fab3 f383 	clz	r3, r3
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	fa06 f303 	lsl.w	r3, r6, r3
 8000ede:	4213      	tst	r3, r2
 8000ee0:	d1d4      	bne.n	8000e8c <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee2:	f7ff fdfd 	bl	8000ae0 <HAL_GetTick>
 8000ee6:	eba0 0008 	sub.w	r0, r0, r8
 8000eea:	2802      	cmp	r0, #2
 8000eec:	d9ec      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x1a4>
 8000eee:	e780      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
 8000ef0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000ef4:	fab3 f383 	clz	r3, r3
 8000ef8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000efc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	2702      	movs	r7, #2
 8000f04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f06:	f7ff fdeb 	bl	8000ae0 <HAL_GetTick>
 8000f0a:	4680      	mov	r8, r0
 8000f0c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f10:	6822      	ldr	r2, [r4, #0]
 8000f12:	fa97 f3a7 	rbit	r3, r7
 8000f16:	fab3 f383 	clz	r3, r3
 8000f1a:	f003 031f 	and.w	r3, r3, #31
 8000f1e:	fa06 f303 	lsl.w	r3, r6, r3
 8000f22:	4213      	tst	r3, r2
 8000f24:	f43f af0d 	beq.w	8000d42 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f28:	f7ff fdda 	bl	8000ae0 <HAL_GetTick>
 8000f2c:	eba0 0008 	sub.w	r0, r0, r8
 8000f30:	2802      	cmp	r0, #2
 8000f32:	d9eb      	bls.n	8000f0c <HAL_RCC_OscConfig+0x1e8>
 8000f34:	e75d      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f36:	69aa      	ldr	r2, [r5, #24]
 8000f38:	4e43      	ldr	r6, [pc, #268]	; (8001048 <HAL_RCC_OscConfig+0x324>)
 8000f3a:	4944      	ldr	r1, [pc, #272]	; (800104c <HAL_RCC_OscConfig+0x328>)
 8000f3c:	2401      	movs	r4, #1
 8000f3e:	b31a      	cbz	r2, 8000f88 <HAL_RCC_OscConfig+0x264>
 8000f40:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000f44:	fab3 f383 	clz	r3, r3
 8000f48:	440b      	add	r3, r1
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	2702      	movs	r7, #2
 8000f4e:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000f50:	f7ff fdc6 	bl	8000ae0 <HAL_GetTick>
 8000f54:	4680      	mov	r8, r0
 8000f56:	fa97 f3a7 	rbit	r3, r7
 8000f5a:	fa97 f3a7 	rbit	r3, r7
 8000f5e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f62:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000f64:	fa97 f3a7 	rbit	r3, r7
 8000f68:	fab3 f383 	clz	r3, r3
 8000f6c:	f003 031f 	and.w	r3, r3, #31
 8000f70:	fa04 f303 	lsl.w	r3, r4, r3
 8000f74:	4213      	tst	r3, r2
 8000f76:	f47f aee8 	bne.w	8000d4a <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fdb1 	bl	8000ae0 <HAL_GetTick>
 8000f7e:	eba0 0008 	sub.w	r0, r0, r8
 8000f82:	2802      	cmp	r0, #2
 8000f84:	d9e7      	bls.n	8000f56 <HAL_RCC_OscConfig+0x232>
 8000f86:	e734      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
 8000f88:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000f8c:	fab3 f383 	clz	r3, r3
 8000f90:	440b      	add	r3, r1
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	2702      	movs	r7, #2
 8000f96:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f98:	f7ff fda2 	bl	8000ae0 <HAL_GetTick>
 8000f9c:	4680      	mov	r8, r0
 8000f9e:	fa97 f3a7 	rbit	r3, r7
 8000fa2:	fa97 f3a7 	rbit	r3, r7
 8000fa6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000faa:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000fac:	fa97 f3a7 	rbit	r3, r7
 8000fb0:	fab3 f383 	clz	r3, r3
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	fa04 f303 	lsl.w	r3, r4, r3
 8000fbc:	4213      	tst	r3, r2
 8000fbe:	f43f aec4 	beq.w	8000d4a <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fd8d 	bl	8000ae0 <HAL_GetTick>
 8000fc6:	eba0 0008 	sub.w	r0, r0, r8
 8000fca:	2802      	cmp	r0, #2
 8000fcc:	d9e7      	bls.n	8000f9e <HAL_RCC_OscConfig+0x27a>
 8000fce:	e710      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fd0:	4c1d      	ldr	r4, [pc, #116]	; (8001048 <HAL_RCC_OscConfig+0x324>)
 8000fd2:	69e3      	ldr	r3, [r4, #28]
 8000fd4:	00d9      	lsls	r1, r3, #3
 8000fd6:	d434      	bmi.n	8001042 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	69e3      	ldr	r3, [r4, #28]
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	61e3      	str	r3, [r4, #28]
 8000fe0:	69e3      	ldr	r3, [r4, #28]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000fea:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fec:	4f18      	ldr	r7, [pc, #96]	; (8001050 <HAL_RCC_OscConfig+0x32c>)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	05da      	lsls	r2, r3, #23
 8000ff2:	d52f      	bpl.n	8001054 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff4:	68eb      	ldr	r3, [r5, #12]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d13d      	bne.n	8001076 <HAL_RCC_OscConfig+0x352>
 8000ffa:	6a23      	ldr	r3, [r4, #32]
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001002:	f7ff fd6d 	bl	8000ae0 <HAL_GetTick>
 8001006:	2702      	movs	r7, #2
 8001008:	4682      	mov	sl, r0
 800100a:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100c:	f04f 0801 	mov.w	r8, #1
 8001010:	fa97 f3a7 	rbit	r3, r7
 8001014:	fa97 f3a7 	rbit	r3, r7
 8001018:	2b00      	cmp	r3, #0
 800101a:	d06c      	beq.n	80010f6 <HAL_RCC_OscConfig+0x3d2>
 800101c:	6a22      	ldr	r2, [r4, #32]
 800101e:	fa99 f3a9 	rbit	r3, r9
 8001022:	fab3 f383 	clz	r3, r3
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	fa08 f303 	lsl.w	r3, r8, r3
 800102e:	4213      	tst	r3, r2
 8001030:	d058      	beq.n	80010e4 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8001032:	2e00      	cmp	r6, #0
 8001034:	f43f ae8d 	beq.w	8000d52 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001038:	69e3      	ldr	r3, [r4, #28]
 800103a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800103e:	61e3      	str	r3, [r4, #28]
 8001040:	e687      	b.n	8000d52 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8001042:	2600      	movs	r6, #0
 8001044:	e7d2      	b.n	8000fec <HAL_RCC_OscConfig+0x2c8>
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	10908120 	.word	0x10908120
 8001050:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800105c:	f7ff fd40 	bl	8000ae0 <HAL_GetTick>
 8001060:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	d4c5      	bmi.n	8000ff4 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001068:	f7ff fd3a 	bl	8000ae0 <HAL_GetTick>
 800106c:	eba0 0008 	sub.w	r0, r0, r8
 8001070:	2864      	cmp	r0, #100	; 0x64
 8001072:	d9f6      	bls.n	8001062 <HAL_RCC_OscConfig+0x33e>
 8001074:	e6bd      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001076:	bb3b      	cbnz	r3, 80010c8 <HAL_RCC_OscConfig+0x3a4>
 8001078:	6a23      	ldr	r3, [r4, #32]
 800107a:	f023 0301 	bic.w	r3, r3, #1
 800107e:	6223      	str	r3, [r4, #32]
 8001080:	6a23      	ldr	r3, [r4, #32]
 8001082:	f023 0304 	bic.w	r3, r3, #4
 8001086:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001088:	f7ff fd2a 	bl	8000ae0 <HAL_GetTick>
 800108c:	2702      	movs	r7, #2
 800108e:	4682      	mov	sl, r0
 8001090:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001092:	f04f 0801 	mov.w	r8, #1
 8001096:	fa97 f3a7 	rbit	r3, r7
 800109a:	fa97 f3a7 	rbit	r3, r7
 800109e:	b373      	cbz	r3, 80010fe <HAL_RCC_OscConfig+0x3da>
 80010a0:	6a22      	ldr	r2, [r4, #32]
 80010a2:	fa99 f3a9 	rbit	r3, r9
 80010a6:	fab3 f383 	clz	r3, r3
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	fa08 f303 	lsl.w	r3, r8, r3
 80010b2:	4213      	tst	r3, r2
 80010b4:	d0bd      	beq.n	8001032 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b6:	f7ff fd13 	bl	8000ae0 <HAL_GetTick>
 80010ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80010be:	eba0 000a 	sub.w	r0, r0, sl
 80010c2:	4298      	cmp	r0, r3
 80010c4:	d9e7      	bls.n	8001096 <HAL_RCC_OscConfig+0x372>
 80010c6:	e694      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	6a23      	ldr	r3, [r4, #32]
 80010cc:	d103      	bne.n	80010d6 <HAL_RCC_OscConfig+0x3b2>
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6223      	str	r3, [r4, #32]
 80010d4:	e791      	b.n	8000ffa <HAL_RCC_OscConfig+0x2d6>
 80010d6:	f023 0301 	bic.w	r3, r3, #1
 80010da:	6223      	str	r3, [r4, #32]
 80010dc:	6a23      	ldr	r3, [r4, #32]
 80010de:	f023 0304 	bic.w	r3, r3, #4
 80010e2:	e78d      	b.n	8001000 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e4:	f7ff fcfc 	bl	8000ae0 <HAL_GetTick>
 80010e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80010ec:	eba0 000a 	sub.w	r0, r0, sl
 80010f0:	4298      	cmp	r0, r3
 80010f2:	d98d      	bls.n	8001010 <HAL_RCC_OscConfig+0x2ec>
 80010f4:	e67d      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
 80010f6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010fc:	e78f      	b.n	800101e <HAL_RCC_OscConfig+0x2fa>
 80010fe:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001102:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001104:	e7cd      	b.n	80010a2 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001106:	4c41      	ldr	r4, [pc, #260]	; (800120c <HAL_RCC_OscConfig+0x4e8>)
 8001108:	6863      	ldr	r3, [r4, #4]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b08      	cmp	r3, #8
 8001110:	f43f ae0c 	beq.w	8000d2c <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001114:	2a02      	cmp	r2, #2
 8001116:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800111a:	d152      	bne.n	80011c2 <HAL_RCC_OscConfig+0x49e>
 800111c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001128:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001132:	f7ff fcd5 	bl	8000ae0 <HAL_GetTick>
 8001136:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800113a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113c:	2601      	movs	r6, #1
 800113e:	fa97 f3a7 	rbit	r3, r7
 8001142:	6822      	ldr	r2, [r4, #0]
 8001144:	fa97 f3a7 	rbit	r3, r7
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	f003 031f 	and.w	r3, r3, #31
 8001150:	fa06 f303 	lsl.w	r3, r6, r3
 8001154:	4213      	tst	r3, r2
 8001156:	d12d      	bne.n	80011b4 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001158:	6862      	ldr	r2, [r4, #4]
 800115a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800115c:	6a29      	ldr	r1, [r5, #32]
 800115e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001162:	430b      	orrs	r3, r1
 8001164:	4313      	orrs	r3, r2
 8001166:	6063      	str	r3, [r4, #4]
 8001168:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800116c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001170:	fab3 f383 	clz	r3, r3
 8001174:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001178:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001182:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001184:	f7ff fcac 	bl	8000ae0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001188:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800118a:	4607      	mov	r7, r0
 800118c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001190:	6822      	ldr	r2, [r4, #0]
 8001192:	fa95 f3a5 	rbit	r3, r5
 8001196:	fab3 f383 	clz	r3, r3
 800119a:	f003 031f 	and.w	r3, r3, #31
 800119e:	fa06 f303 	lsl.w	r3, r6, r3
 80011a2:	4213      	tst	r3, r2
 80011a4:	f47f add9 	bne.w	8000d5a <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a8:	f7ff fc9a 	bl	8000ae0 <HAL_GetTick>
 80011ac:	1bc0      	subs	r0, r0, r7
 80011ae:	2802      	cmp	r0, #2
 80011b0:	d9ec      	bls.n	800118c <HAL_RCC_OscConfig+0x468>
 80011b2:	e61e      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b4:	f7ff fc94 	bl	8000ae0 <HAL_GetTick>
 80011b8:	eba0 0008 	sub.w	r0, r0, r8
 80011bc:	2802      	cmp	r0, #2
 80011be:	d9be      	bls.n	800113e <HAL_RCC_OscConfig+0x41a>
 80011c0:	e617      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
 80011c2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80011c6:	fab3 f383 	clz	r3, r3
 80011ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc82 	bl	8000ae0 <HAL_GetTick>
 80011dc:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80011e0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e2:	2601      	movs	r6, #1
 80011e4:	fa95 f3a5 	rbit	r3, r5
 80011e8:	6822      	ldr	r2, [r4, #0]
 80011ea:	fa95 f3a5 	rbit	r3, r5
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	fa06 f303 	lsl.w	r3, r6, r3
 80011fa:	4213      	tst	r3, r2
 80011fc:	f43f adad 	beq.w	8000d5a <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001200:	f7ff fc6e 	bl	8000ae0 <HAL_GetTick>
 8001204:	1bc0      	subs	r0, r0, r7
 8001206:	2802      	cmp	r0, #2
 8001208:	d9ec      	bls.n	80011e4 <HAL_RCC_OscConfig+0x4c0>
 800120a:	e5f2      	b.n	8000df2 <HAL_RCC_OscConfig+0xce>
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001210:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001212:	4c13      	ldr	r4, [pc, #76]	; (8001260 <HAL_RCC_GetSysClockFreq+0x50>)
 8001214:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001216:	f001 030c 	and.w	r3, r1, #12
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11e      	bne.n	800125c <HAL_RCC_GetSysClockFreq+0x4c>
 800121e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001222:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001226:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	fa22 f303 	lsr.w	r3, r2, r3
 8001232:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_RCC_GetSysClockFreq+0x54>)
 8001234:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001236:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001238:	220f      	movs	r2, #15
 800123a:	fa92 f2a2 	rbit	r2, r2
 800123e:	fab2 f282 	clz	r2, r2
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	40d3      	lsrs	r3, r2
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_RCC_GetSysClockFreq+0x58>)
 800124a:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800124c:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800124e:	bf4a      	itet	mi
 8001250:	4b06      	ldrmi	r3, [pc, #24]	; (800126c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001252:	4b07      	ldrpl	r3, [pc, #28]	; (8001270 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001254:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001258:	4358      	muls	r0, r3
 800125a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800125e:	bd10      	pop	{r4, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	08003ed4 	.word	0x08003ed4
 8001268:	08003ee4 	.word	0x08003ee4
 800126c:	007a1200 	.word	0x007a1200
 8001270:	003d0900 	.word	0x003d0900

08001274 <HAL_RCC_ClockConfig>:
{
 8001274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001278:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800127a:	4604      	mov	r4, r0
 800127c:	b910      	cbnz	r0, 8001284 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800127e:	2001      	movs	r0, #1
 8001280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001284:	4a4c      	ldr	r2, [pc, #304]	; (80013b8 <HAL_RCC_ClockConfig+0x144>)
 8001286:	6813      	ldr	r3, [r2, #0]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	428b      	cmp	r3, r1
 800128e:	d32e      	bcc.n	80012ee <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001290:	6822      	ldr	r2, [r4, #0]
 8001292:	0791      	lsls	r1, r2, #30
 8001294:	d436      	bmi.n	8001304 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001296:	07d2      	lsls	r2, r2, #31
 8001298:	d43c      	bmi.n	8001314 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800129a:	4a47      	ldr	r2, [pc, #284]	; (80013b8 <HAL_RCC_ClockConfig+0x144>)
 800129c:	6813      	ldr	r3, [r2, #0]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	429d      	cmp	r5, r3
 80012a4:	d375      	bcc.n	8001392 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	4d44      	ldr	r5, [pc, #272]	; (80013bc <HAL_RCC_ClockConfig+0x148>)
 80012aa:	f012 0f04 	tst.w	r2, #4
 80012ae:	d17c      	bne.n	80013aa <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b0:	0713      	lsls	r3, r2, #28
 80012b2:	d506      	bpl.n	80012c2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012b4:	686b      	ldr	r3, [r5, #4]
 80012b6:	6922      	ldr	r2, [r4, #16]
 80012b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80012bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012c0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012c2:	f7ff ffa5 	bl	8001210 <HAL_RCC_GetSysClockFreq>
 80012c6:	686b      	ldr	r3, [r5, #4]
 80012c8:	22f0      	movs	r2, #240	; 0xf0
 80012ca:	fa92 f2a2 	rbit	r2, r2
 80012ce:	fab2 f282 	clz	r2, r2
 80012d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012d6:	40d3      	lsrs	r3, r2
 80012d8:	4a39      	ldr	r2, [pc, #228]	; (80013c0 <HAL_RCC_ClockConfig+0x14c>)
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	40d8      	lsrs	r0, r3
 80012de:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <HAL_RCC_ClockConfig+0x150>)
 80012e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f001 ffb4 	bl	8003250 <HAL_InitTick>
  return HAL_OK;
 80012e8:	2000      	movs	r0, #0
 80012ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	6813      	ldr	r3, [r2, #0]
 80012f0:	f023 0307 	bic.w	r3, r3, #7
 80012f4:	430b      	orrs	r3, r1
 80012f6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f8:	6813      	ldr	r3, [r2, #0]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	4299      	cmp	r1, r3
 8001300:	d1bd      	bne.n	800127e <HAL_RCC_ClockConfig+0xa>
 8001302:	e7c5      	b.n	8001290 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001304:	492d      	ldr	r1, [pc, #180]	; (80013bc <HAL_RCC_ClockConfig+0x148>)
 8001306:	68a0      	ldr	r0, [r4, #8]
 8001308:	684b      	ldr	r3, [r1, #4]
 800130a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800130e:	4303      	orrs	r3, r0
 8001310:	604b      	str	r3, [r1, #4]
 8001312:	e7c0      	b.n	8001296 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001314:	6862      	ldr	r2, [r4, #4]
 8001316:	4e29      	ldr	r6, [pc, #164]	; (80013bc <HAL_RCC_ClockConfig+0x148>)
 8001318:	2a01      	cmp	r2, #1
 800131a:	d127      	bne.n	800136c <HAL_RCC_ClockConfig+0xf8>
 800131c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001320:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001324:	6831      	ldr	r1, [r6, #0]
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	f003 031f 	and.w	r3, r3, #31
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001338:	d0a1      	beq.n	800127e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	6873      	ldr	r3, [r6, #4]
 800133c:	f023 0303 	bic.w	r3, r3, #3
 8001340:	431a      	orrs	r2, r3
 8001342:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001344:	f7ff fbcc 	bl	8000ae0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800134c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	6873      	ldr	r3, [r6, #4]
 8001350:	6862      	ldr	r2, [r4, #4]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800135a:	d09e      	beq.n	800129a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135c:	f7ff fbc0 	bl	8000ae0 <HAL_GetTick>
 8001360:	1bc0      	subs	r0, r0, r7
 8001362:	4540      	cmp	r0, r8
 8001364:	d9f3      	bls.n	800134e <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001366:	2003      	movs	r0, #3
}
 8001368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800136c:	2a02      	cmp	r2, #2
 800136e:	bf0c      	ite	eq
 8001370:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001374:	2302      	movne	r3, #2
 8001376:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137a:	6830      	ldr	r0, [r6, #0]
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	fab3 f383 	clz	r3, r3
 8001384:	f003 031f 	and.w	r3, r3, #31
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	4203      	tst	r3, r0
 8001390:	e7d2      	b.n	8001338 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	6813      	ldr	r3, [r2, #0]
 8001394:	f023 0307 	bic.w	r3, r3, #7
 8001398:	432b      	orrs	r3, r5
 800139a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800139c:	6813      	ldr	r3, [r2, #0]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	429d      	cmp	r5, r3
 80013a4:	f47f af6b 	bne.w	800127e <HAL_RCC_ClockConfig+0xa>
 80013a8:	e77d      	b.n	80012a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013aa:	686b      	ldr	r3, [r5, #4]
 80013ac:	68e1      	ldr	r1, [r4, #12]
 80013ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013b2:	430b      	orrs	r3, r1
 80013b4:	606b      	str	r3, [r5, #4]
 80013b6:	e77b      	b.n	80012b0 <HAL_RCC_ClockConfig+0x3c>
 80013b8:	40022000 	.word	0x40022000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	08003f32 	.word	0x08003f32
 80013c4:	2000000c 	.word	0x2000000c

080013c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	fa92 f2a2 	rbit	r2, r2
 80013d4:	fab2 f282 	clz	r2, r2
 80013d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013dc:	40d3      	lsrs	r3, r2
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80013e4:	6810      	ldr	r0, [r2, #0]
}    
 80013e6:	40d8      	lsrs	r0, r3
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	08003f42 	.word	0x08003f42
 80013f4:	2000000c 	.word	0x2000000c

080013f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_RCC_GetPCLK2Freq+0x24>)
 80013fa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	fa92 f2a2 	rbit	r2, r2
 8001404:	fab2 f282 	clz	r2, r2
 8001408:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800140c:	40d3      	lsrs	r3, r2
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001414:	6810      	ldr	r0, [r2, #0]
} 
 8001416:	40d8      	lsrs	r0, r3
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	08003f42 	.word	0x08003f42
 8001424:	2000000c 	.word	0x2000000c

08001428 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001428:	230f      	movs	r3, #15
 800142a:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_GetClockConfig+0x34>)
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800143c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001444:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800144e:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_RCC_GetClockConfig+0x38>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	600b      	str	r3, [r1, #0]
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000
 8001460:	40022000 	.word	0x40022000

08001464 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001464:	6803      	ldr	r3, [r0, #0]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	f042 0201 	orr.w	r2, r2, #1
 800146c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001476:	2000      	movs	r0, #0
 8001478:	4770      	bx	lr

0800147a <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001484:	6a19      	ldr	r1, [r3, #32]
 8001486:	f241 1211 	movw	r2, #4369	; 0x1111
 800148a:	4211      	tst	r1, r2
 800148c:	d108      	bne.n	80014a0 <HAL_TIM_Base_Stop_IT+0x26>
 800148e:	6a19      	ldr	r1, [r3, #32]
 8001490:	f240 4244 	movw	r2, #1092	; 0x444
 8001494:	4211      	tst	r1, r2
 8001496:	bf02      	ittt	eq
 8001498:	681a      	ldreq	r2, [r3, #0]
 800149a:	f022 0201 	biceq.w	r2, r2, #1
 800149e:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 80014a0:	2000      	movs	r0, #0
 80014a2:	4770      	bx	lr

080014a4 <HAL_TIM_OC_DelayElapsedCallback>:
 80014a4:	4770      	bx	lr

080014a6 <HAL_TIM_IC_CaptureCallback>:
 80014a6:	4770      	bx	lr

080014a8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80014a8:	4770      	bx	lr

080014aa <HAL_TIM_TriggerCallback>:
 80014aa:	4770      	bx	lr

080014ac <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014ac:	6803      	ldr	r3, [r0, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	0791      	lsls	r1, r2, #30
{
 80014b2:	b510      	push	{r4, lr}
 80014b4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014b6:	d50f      	bpl.n	80014d8 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	0792      	lsls	r2, r2, #30
 80014bc:	d50c      	bpl.n	80014d8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80014be:	f06f 0202 	mvn.w	r2, #2
 80014c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014c4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014c6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014c8:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014ca:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014cc:	f000 8085 	beq.w	80015da <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80014d0:	f7ff ffe9 	bl	80014a6 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014d4:	2300      	movs	r3, #0
 80014d6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	0752      	lsls	r2, r2, #29
 80014de:	d510      	bpl.n	8001502 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	0750      	lsls	r0, r2, #29
 80014e4:	d50d      	bpl.n	8001502 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80014e6:	f06f 0204 	mvn.w	r2, #4
 80014ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014ec:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014ee:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014f0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014f4:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80014f6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014f8:	d075      	beq.n	80015e6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80014fa:	f7ff ffd4 	bl	80014a6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014fe:	2300      	movs	r3, #0
 8001500:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	0711      	lsls	r1, r2, #28
 8001508:	d50f      	bpl.n	800152a <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	0712      	lsls	r2, r2, #28
 800150e:	d50c      	bpl.n	800152a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001510:	f06f 0208 	mvn.w	r2, #8
 8001514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001516:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001518:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800151a:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800151c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800151e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001520:	d067      	beq.n	80015f2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001522:	f7ff ffc0 	bl	80014a6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001526:	2300      	movs	r3, #0
 8001528:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	06d0      	lsls	r0, r2, #27
 8001530:	d510      	bpl.n	8001554 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	06d1      	lsls	r1, r2, #27
 8001536:	d50d      	bpl.n	8001554 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001538:	f06f 0210 	mvn.w	r2, #16
 800153c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800153e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001540:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001542:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001546:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001548:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800154a:	d058      	beq.n	80015fe <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800154c:	f7ff ffab 	bl	80014a6 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001550:	2300      	movs	r3, #0
 8001552:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	07d2      	lsls	r2, r2, #31
 800155a:	d508      	bpl.n	800156e <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	07d0      	lsls	r0, r2, #31
 8001560:	d505      	bpl.n	800156e <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001562:	f06f 0201 	mvn.w	r2, #1
 8001566:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001568:	4620      	mov	r0, r4
 800156a:	f001 fe45 	bl	80031f8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	0611      	lsls	r1, r2, #24
 8001574:	d508      	bpl.n	8001588 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	0612      	lsls	r2, r2, #24
 800157a:	d505      	bpl.n	8001588 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800157c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001580:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001582:	4620      	mov	r0, r4
 8001584:	f000 f989 	bl	800189a <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	05d0      	lsls	r0, r2, #23
 800158e:	d508      	bpl.n	80015a2 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	0611      	lsls	r1, r2, #24
 8001594:	d505      	bpl.n	80015a2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001596:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800159a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800159c:	4620      	mov	r0, r4
 800159e:	f000 f97d 	bl	800189c <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	691a      	ldr	r2, [r3, #16]
 80015a6:	0652      	lsls	r2, r2, #25
 80015a8:	d508      	bpl.n	80015bc <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	0650      	lsls	r0, r2, #25
 80015ae:	d505      	bpl.n	80015bc <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80015b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80015b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff ff77 	bl	80014aa <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	0691      	lsls	r1, r2, #26
 80015c2:	d522      	bpl.n	800160a <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	0692      	lsls	r2, r2, #26
 80015c8:	d51f      	bpl.n	800160a <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80015ca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80015ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80015d0:	611a      	str	r2, [r3, #16]
    }
  }
}
 80015d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80015d6:	f000 b95f 	b.w	8001898 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015da:	f7ff ff63 	bl	80014a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015de:	4620      	mov	r0, r4
 80015e0:	f7ff ff62 	bl	80014a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80015e4:	e776      	b.n	80014d4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e6:	f7ff ff5d 	bl	80014a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff ff5c 	bl	80014a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80015f0:	e785      	b.n	80014fe <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f2:	f7ff ff57 	bl	80014a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80015f6:	4620      	mov	r0, r4
 80015f8:	f7ff ff56 	bl	80014a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80015fc:	e793      	b.n	8001526 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015fe:	f7ff ff51 	bl	80014a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff ff50 	bl	80014a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001608:	e7a2      	b.n	8001550 <HAL_TIM_IRQHandler+0xa4>
 800160a:	bd10      	pop	{r4, pc}

0800160c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800160c:	4a21      	ldr	r2, [pc, #132]	; (8001694 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 800160e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001610:	4290      	cmp	r0, r2
{
 8001612:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001614:	d005      	beq.n	8001622 <TIM_Base_SetConfig+0x16>
 8001616:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800161a:	d002      	beq.n	8001622 <TIM_Base_SetConfig+0x16>
 800161c:	4c1e      	ldr	r4, [pc, #120]	; (8001698 <TIM_Base_SetConfig+0x8c>)
 800161e:	42a0      	cmp	r0, r4
 8001620:	d10c      	bne.n	800163c <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001622:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001628:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800162a:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800162e:	d010      	beq.n	8001652 <TIM_Base_SetConfig+0x46>
 8001630:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001634:	d00d      	beq.n	8001652 <TIM_Base_SetConfig+0x46>
 8001636:	4a18      	ldr	r2, [pc, #96]	; (8001698 <TIM_Base_SetConfig+0x8c>)
 8001638:	4290      	cmp	r0, r2
 800163a:	d00a      	beq.n	8001652 <TIM_Base_SetConfig+0x46>
 800163c:	4a17      	ldr	r2, [pc, #92]	; (800169c <TIM_Base_SetConfig+0x90>)
 800163e:	4290      	cmp	r0, r2
 8001640:	d007      	beq.n	8001652 <TIM_Base_SetConfig+0x46>
 8001642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001646:	4290      	cmp	r0, r2
 8001648:	d003      	beq.n	8001652 <TIM_Base_SetConfig+0x46>
 800164a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800164e:	4290      	cmp	r0, r2
 8001650:	d103      	bne.n	800165a <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001652:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001658:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800165a:	694a      	ldr	r2, [r1, #20]
 800165c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001660:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001662:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001664:	688b      	ldr	r3, [r1, #8]
 8001666:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001668:	680b      	ldr	r3, [r1, #0]
 800166a:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <TIM_Base_SetConfig+0x88>)
 800166e:	4298      	cmp	r0, r3
 8001670:	d00b      	beq.n	800168a <TIM_Base_SetConfig+0x7e>
 8001672:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001676:	4298      	cmp	r0, r3
 8001678:	d007      	beq.n	800168a <TIM_Base_SetConfig+0x7e>
 800167a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800167e:	4298      	cmp	r0, r3
 8001680:	d003      	beq.n	800168a <TIM_Base_SetConfig+0x7e>
 8001682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001686:	4298      	cmp	r0, r3
 8001688:	d101      	bne.n	800168e <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800168a:	690b      	ldr	r3, [r1, #16]
 800168c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800168e:	2301      	movs	r3, #1
 8001690:	6143      	str	r3, [r0, #20]
 8001692:	bd10      	pop	{r4, pc}
 8001694:	40012c00 	.word	0x40012c00
 8001698:	40000400 	.word	0x40000400
 800169c:	40014000 	.word	0x40014000

080016a0 <HAL_TIM_Base_Init>:
{ 
 80016a0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80016a2:	4604      	mov	r4, r0
 80016a4:	b1a0      	cbz	r0, 80016d0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80016a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016ae:	b91b      	cbnz	r3, 80016b8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80016b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80016b4:	f001 fefe 	bl	80034b4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80016b8:	2302      	movs	r3, #2
 80016ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80016be:	6820      	ldr	r0, [r4, #0]
 80016c0:	1d21      	adds	r1, r4, #4
 80016c2:	f7ff ffa3 	bl	800160c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80016cc:	2000      	movs	r0, #0
 80016ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016d0:	2001      	movs	r0, #1
}
 80016d2:	bd10      	pop	{r4, pc}

080016d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80016d4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80016d6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016d8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016da:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016de:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80016e2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016e4:	6083      	str	r3, [r0, #8]
 80016e6:	bd10      	pop	{r4, pc}

080016e8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80016e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80016ec:	2b01      	cmp	r3, #1
{
 80016ee:	b570      	push	{r4, r5, r6, lr}
 80016f0:	4604      	mov	r4, r0
 80016f2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80016f6:	d01a      	beq.n	800172e <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 80016f8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80016fc:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80016fe:	2301      	movs	r3, #1
 8001700:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001704:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001706:	4b52      	ldr	r3, [pc, #328]	; (8001850 <HAL_TIM_ConfigClockSource+0x168>)
 8001708:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800170a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800170c:	680b      	ldr	r3, [r1, #0]
 800170e:	2b40      	cmp	r3, #64	; 0x40
 8001710:	d075      	beq.n	80017fe <HAL_TIM_ConfigClockSource+0x116>
 8001712:	d818      	bhi.n	8001746 <HAL_TIM_ConfigClockSource+0x5e>
 8001714:	2b10      	cmp	r3, #16
 8001716:	f000 808f 	beq.w	8001838 <HAL_TIM_ConfigClockSource+0x150>
 800171a:	d809      	bhi.n	8001730 <HAL_TIM_ConfigClockSource+0x48>
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8085 	beq.w	800182c <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001722:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001724:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001726:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800172a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800172e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001730:	2b20      	cmp	r3, #32
 8001732:	f000 8087 	beq.w	8001844 <HAL_TIM_ConfigClockSource+0x15c>
 8001736:	2b30      	cmp	r3, #48	; 0x30
 8001738:	d1f3      	bne.n	8001722 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 800173a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800173c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001740:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001744:	e033      	b.n	80017ae <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001746:	2b70      	cmp	r3, #112	; 0x70
 8001748:	d033      	beq.n	80017b2 <HAL_TIM_ConfigClockSource+0xca>
 800174a:	d81b      	bhi.n	8001784 <HAL_TIM_ConfigClockSource+0x9c>
 800174c:	2b50      	cmp	r3, #80	; 0x50
 800174e:	d03f      	beq.n	80017d0 <HAL_TIM_ConfigClockSource+0xe8>
 8001750:	2b60      	cmp	r3, #96	; 0x60
 8001752:	d1e6      	bne.n	8001722 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001754:	684d      	ldr	r5, [r1, #4]
 8001756:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001758:	6a01      	ldr	r1, [r0, #32]
 800175a:	f021 0110 	bic.w	r1, r1, #16
 800175e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001760:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001762:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001764:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001768:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800176c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001770:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001774:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001776:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001778:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800177a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800177e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001782:	e014      	b.n	80017ae <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001788:	d00c      	beq.n	80017a4 <HAL_TIM_ConfigClockSource+0xbc>
 800178a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800178e:	d1c8      	bne.n	8001722 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001790:	68cb      	ldr	r3, [r1, #12]
 8001792:	684a      	ldr	r2, [r1, #4]
 8001794:	6889      	ldr	r1, [r1, #8]
 8001796:	f7ff ff9d 	bl	80016d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800179a:	6822      	ldr	r2, [r4, #0]
 800179c:	6893      	ldr	r3, [r2, #8]
 800179e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a2:	e013      	b.n	80017cc <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80017a4:	6883      	ldr	r3, [r0, #8]
 80017a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017aa:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80017ae:	6083      	str	r3, [r0, #8]
 80017b0:	e7b7      	b.n	8001722 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80017b2:	68cb      	ldr	r3, [r1, #12]
 80017b4:	684a      	ldr	r2, [r1, #4]
 80017b6:	6889      	ldr	r1, [r1, #8]
 80017b8:	f7ff ff8c 	bl	80016d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80017bc:	6822      	ldr	r2, [r4, #0]
 80017be:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80017c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80017c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80017cc:	6093      	str	r3, [r2, #8]
    break;
 80017ce:	e7a8      	b.n	8001722 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80017d0:	684a      	ldr	r2, [r1, #4]
 80017d2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80017d4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017d6:	6a05      	ldr	r5, [r0, #32]
 80017d8:	f025 0501 	bic.w	r5, r5, #1
 80017dc:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80017de:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017e0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017e8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80017ec:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80017ee:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80017f0:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80017f2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80017f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80017f8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80017fc:	e7d7      	b.n	80017ae <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80017fe:	684a      	ldr	r2, [r1, #4]
 8001800:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001802:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001804:	6a05      	ldr	r5, [r0, #32]
 8001806:	f025 0501 	bic.w	r5, r5, #1
 800180a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800180c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800180e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001816:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800181a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800181c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800181e:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001820:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001826:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800182a:	e7c0      	b.n	80017ae <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 800182c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800182e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001832:	f043 0307 	orr.w	r3, r3, #7
 8001836:	e7ba      	b.n	80017ae <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001838:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800183a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800183e:	f043 0317 	orr.w	r3, r3, #23
 8001842:	e7b4      	b.n	80017ae <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001844:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800184a:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800184e:	e7ae      	b.n	80017ae <HAL_TIM_ConfigClockSource+0xc6>
 8001850:	fffe0088 	.word	0xfffe0088

08001854 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001854:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001858:	2b01      	cmp	r3, #1
{
 800185a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800185c:	d018      	beq.n	8001890 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800185e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001860:	4d0c      	ldr	r5, [pc, #48]	; (8001894 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8001862:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001864:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001866:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001868:	bf02      	ittt	eq
 800186a:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800186c:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001870:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001872:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001874:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800187a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800187c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001880:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001882:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001884:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001886:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001888:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 800188c:	4618      	mov	r0, r3
 800188e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001890:	2002      	movs	r0, #2
} 
 8001892:	bd30      	pop	{r4, r5, pc}
 8001894:	40012c00 	.word	0x40012c00

08001898 <HAL_TIMEx_CommutationCallback>:
 8001898:	4770      	bx	lr

0800189a <HAL_TIMEx_BreakCallback>:
 800189a:	4770      	bx	lr

0800189c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800189c:	4770      	bx	lr
	...

080018a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018a0:	b538      	push	{r3, r4, r5, lr}
 80018a2:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80018a4:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018a6:	6921      	ldr	r1, [r4, #16]
 80018a8:	68a3      	ldr	r3, [r4, #8]
 80018aa:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80018ac:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018ae:	430b      	orrs	r3, r1
 80018b0:	6961      	ldr	r1, [r4, #20]
 80018b2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80018b4:	4949      	ldr	r1, [pc, #292]	; (80019dc <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018b6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80018b8:	4001      	ands	r1, r0
 80018ba:	430b      	orrs	r3, r1
 80018bc:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018be:	686b      	ldr	r3, [r5, #4]
 80018c0:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80018c2:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018c8:	430b      	orrs	r3, r1
 80018ca:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018cc:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80018ce:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018d0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80018d4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018d6:	430b      	orrs	r3, r1
 80018d8:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018da:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <UART_SetConfig+0x140>)
 80018dc:	429d      	cmp	r5, r3
 80018de:	d112      	bne.n	8001906 <UART_SetConfig+0x66>
 80018e0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80018e4:	493f      	ldr	r1, [pc, #252]	; (80019e4 <UART_SetConfig+0x144>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80018f0:	5ccb      	ldrb	r3, [r1, r3]
 80018f2:	d13b      	bne.n	800196c <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d836      	bhi.n	8001966 <UART_SetConfig+0xc6>
 80018f8:	e8df f003 	tbb	[pc, r3]
 80018fc:	3524210f 	.word	0x3524210f
 8001900:	3535352d 	.word	0x3535352d
 8001904:	30          	.byte	0x30
 8001905:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001906:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <UART_SetConfig+0x148>)
 8001908:	429d      	cmp	r5, r3
 800190a:	d003      	beq.n	8001914 <UART_SetConfig+0x74>
 800190c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001910:	429d      	cmp	r5, r3
 8001912:	d15e      	bne.n	80019d2 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001914:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001918:	d131      	bne.n	800197e <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800191a:	f7ff fd55 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800191e:	6861      	ldr	r1, [r4, #4]
 8001920:	084a      	lsrs	r2, r1, #1
 8001922:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001926:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800192a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800192c:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800192e:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8001932:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001934:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001938:	4313      	orrs	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
 800193c:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800193e:	f7ff fd5b 	bl	80013f8 <HAL_RCC_GetPCLK2Freq>
 8001942:	e7ec      	b.n	800191e <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001944:	6860      	ldr	r0, [r4, #4]
 8001946:	0843      	lsrs	r3, r0, #1
 8001948:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800194c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001950:	fbb3 f3f0 	udiv	r3, r3, r0
 8001954:	e7e9      	b.n	800192a <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001956:	f7ff fc5b 	bl	8001210 <HAL_RCC_GetSysClockFreq>
 800195a:	e7e0      	b.n	800191e <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800195c:	6860      	ldr	r0, [r4, #4]
 800195e:	0843      	lsrs	r3, r0, #1
 8001960:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001964:	e7f4      	b.n	8001950 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8001966:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001968:	2300      	movs	r3, #0
 800196a:	e7e0      	b.n	800192e <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 800196c:	2b08      	cmp	r3, #8
 800196e:	d833      	bhi.n	80019d8 <UART_SetConfig+0x138>
 8001970:	e8df f003 	tbb	[pc, r3]
 8001974:	321b1005 	.word	0x321b1005
 8001978:	32323227 	.word	0x32323227
 800197c:	2a          	.byte	0x2a
 800197d:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800197e:	f7ff fd23 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
 8001982:	6863      	ldr	r3, [r4, #4]
 8001984:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001988:	fbb0 f0f3 	udiv	r0, r0, r3
 800198c:	b280      	uxth	r0, r0
 800198e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001990:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 8001992:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001994:	f7ff fd30 	bl	80013f8 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001998:	6863      	ldr	r3, [r4, #4]
 800199a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800199e:	fbb0 f0f3 	udiv	r0, r0, r3
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <UART_SetConfig+0x140>)
 80019a4:	b280      	uxth	r0, r0
 80019a6:	60d8      	str	r0, [r3, #12]
 80019a8:	e7f2      	b.n	8001990 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80019aa:	6862      	ldr	r2, [r4, #4]
 80019ac:	0853      	lsrs	r3, r2, #1
 80019ae:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80019b2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80019b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80019ba:	4a09      	ldr	r2, [pc, #36]	; (80019e0 <UART_SetConfig+0x140>)
 80019bc:	b29b      	uxth	r3, r3
 80019be:	60d3      	str	r3, [r2, #12]
 80019c0:	e7e6      	b.n	8001990 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019c2:	f7ff fc25 	bl	8001210 <HAL_RCC_GetSysClockFreq>
 80019c6:	e7e7      	b.n	8001998 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80019c8:	6862      	ldr	r2, [r4, #4]
 80019ca:	0853      	lsrs	r3, r2, #1
 80019cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80019d0:	e7f1      	b.n	80019b6 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80019d6:	d0c6      	beq.n	8001966 <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80019d8:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80019da:	bd38      	pop	{r3, r4, r5, pc}
 80019dc:	efff69f3 	.word	0xefff69f3
 80019e0:	40013800 	.word	0x40013800
 80019e4:	08003ef4 	.word	0x08003ef4
 80019e8:	40004400 	.word	0x40004400

080019ec <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019ee:	07da      	lsls	r2, r3, #31
{
 80019f0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019f2:	d506      	bpl.n	8001a02 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80019f4:	6801      	ldr	r1, [r0, #0]
 80019f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80019f8:	684a      	ldr	r2, [r1, #4]
 80019fa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80019fe:	4322      	orrs	r2, r4
 8001a00:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a02:	079c      	lsls	r4, r3, #30
 8001a04:	d506      	bpl.n	8001a14 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a06:	6801      	ldr	r1, [r0, #0]
 8001a08:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001a0a:	684a      	ldr	r2, [r1, #4]
 8001a0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a10:	4322      	orrs	r2, r4
 8001a12:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a14:	0759      	lsls	r1, r3, #29
 8001a16:	d506      	bpl.n	8001a26 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a18:	6801      	ldr	r1, [r0, #0]
 8001a1a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001a1c:	684a      	ldr	r2, [r1, #4]
 8001a1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a22:	4322      	orrs	r2, r4
 8001a24:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a26:	071a      	lsls	r2, r3, #28
 8001a28:	d506      	bpl.n	8001a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a2a:	6801      	ldr	r1, [r0, #0]
 8001a2c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001a2e:	684a      	ldr	r2, [r1, #4]
 8001a30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a34:	4322      	orrs	r2, r4
 8001a36:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a38:	06dc      	lsls	r4, r3, #27
 8001a3a:	d506      	bpl.n	8001a4a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a3c:	6801      	ldr	r1, [r0, #0]
 8001a3e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001a40:	688a      	ldr	r2, [r1, #8]
 8001a42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a46:	4322      	orrs	r2, r4
 8001a48:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a4a:	0699      	lsls	r1, r3, #26
 8001a4c:	d506      	bpl.n	8001a5c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a4e:	6801      	ldr	r1, [r0, #0]
 8001a50:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001a52:	688a      	ldr	r2, [r1, #8]
 8001a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a58:	4322      	orrs	r2, r4
 8001a5a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a5c:	065a      	lsls	r2, r3, #25
 8001a5e:	d50f      	bpl.n	8001a80 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a60:	6801      	ldr	r1, [r0, #0]
 8001a62:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001a64:	684a      	ldr	r2, [r1, #4]
 8001a66:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001a6a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a6c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a70:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a72:	d105      	bne.n	8001a80 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a74:	684a      	ldr	r2, [r1, #4]
 8001a76:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a78:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001a7c:	4322      	orrs	r2, r4
 8001a7e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	d506      	bpl.n	8001a92 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a84:	6802      	ldr	r2, [r0, #0]
 8001a86:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a88:	6853      	ldr	r3, [r2, #4]
 8001a8a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	6053      	str	r3, [r2, #4]
 8001a92:	bd10      	pop	{r4, pc}

08001a94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a98:	9d06      	ldr	r5, [sp, #24]
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	460f      	mov	r7, r1
 8001a9e:	4616      	mov	r6, r2
 8001aa0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aa2:	6821      	ldr	r1, [r4, #0]
 8001aa4:	69ca      	ldr	r2, [r1, #28]
 8001aa6:	ea37 0302 	bics.w	r3, r7, r2
 8001aaa:	bf0c      	ite	eq
 8001aac:	2201      	moveq	r2, #1
 8001aae:	2200      	movne	r2, #0
 8001ab0:	42b2      	cmp	r2, r6
 8001ab2:	d002      	beq.n	8001aba <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001ab4:	2000      	movs	r0, #0
}
 8001ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001aba:	1c6b      	adds	r3, r5, #1
 8001abc:	d0f2      	beq.n	8001aa4 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001abe:	b99d      	cbnz	r5, 8001ae8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ac8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001ad8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001adc:	2300      	movs	r3, #0
 8001ade:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ae8:	f7fe fffa 	bl	8000ae0 <HAL_GetTick>
 8001aec:	eba0 0008 	sub.w	r0, r0, r8
 8001af0:	4285      	cmp	r5, r0
 8001af2:	d2d6      	bcs.n	8001aa2 <UART_WaitOnFlagUntilTimeout+0xe>
 8001af4:	e7e4      	b.n	8001ac0 <UART_WaitOnFlagUntilTimeout+0x2c>

08001af6 <HAL_UART_Transmit>:
{
 8001af6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001afa:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001afc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001b00:	2b20      	cmp	r3, #32
{
 8001b02:	4604      	mov	r4, r0
 8001b04:	460d      	mov	r5, r1
 8001b06:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001b08:	d14c      	bne.n	8001ba4 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001b0a:	2900      	cmp	r1, #0
 8001b0c:	d048      	beq.n	8001ba0 <HAL_UART_Transmit+0xaa>
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	d046      	beq.n	8001ba0 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001b12:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d044      	beq.n	8001ba4 <HAL_UART_Transmit+0xae>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b24:	2321      	movs	r3, #33	; 0x21
 8001b26:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001b2a:	f7fe ffd9 	bl	8000ae0 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001b2e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001b32:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001b34:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001b38:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	b962      	cbnz	r2, 8001b5a <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b40:	9700      	str	r7, [sp, #0]
 8001b42:	4633      	mov	r3, r6
 8001b44:	2140      	movs	r1, #64	; 0x40
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff ffa4 	bl	8001a94 <UART_WaitOnFlagUntilTimeout>
 8001b4c:	b998      	cbnz	r0, 8001b76 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001b54:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001b58:	e00e      	b.n	8001b78 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001b5a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b5e:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4633      	mov	r3, r6
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7ff ff90 	bl	8001a94 <UART_WaitOnFlagUntilTimeout>
 8001b74:	b118      	cbz	r0, 8001b7e <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001b76:	2003      	movs	r0, #3
}
 8001b78:	b002      	add	sp, #8
 8001b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b7e:	68a3      	ldr	r3, [r4, #8]
 8001b80:	6822      	ldr	r2, [r4, #0]
 8001b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b86:	d107      	bne.n	8001b98 <HAL_UART_Transmit+0xa2>
 8001b88:	6923      	ldr	r3, [r4, #16]
 8001b8a:	b92b      	cbnz	r3, 8001b98 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001b8c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b94:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001b96:	e7cf      	b.n	8001b38 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001b98:	782b      	ldrb	r3, [r5, #0]
 8001b9a:	8513      	strh	r3, [r2, #40]	; 0x28
 8001b9c:	3501      	adds	r5, #1
 8001b9e:	e7cb      	b.n	8001b38 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	e7e9      	b.n	8001b78 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	e7e7      	b.n	8001b78 <HAL_UART_Transmit+0x82>

08001ba8 <UART_CheckIdleState>:
{
 8001ba8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001baa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bac:	2600      	movs	r6, #0
 8001bae:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001bb0:	f7fe ff96 	bl	8000ae0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001bba:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001bbc:	d417      	bmi.n	8001bee <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	075b      	lsls	r3, r3, #29
 8001bc4:	d50a      	bpl.n	8001bdc <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	462b      	mov	r3, r5
 8001bd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f7ff ff5d 	bl	8001a94 <UART_WaitOnFlagUntilTimeout>
 8001bda:	b9a0      	cbnz	r0, 8001c06 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001bdc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001bde:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001be0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001be4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001be8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001bec:	e00c      	b.n	8001c08 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4632      	mov	r2, r6
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f7ff ff49 	bl	8001a94 <UART_WaitOnFlagUntilTimeout>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d0db      	beq.n	8001bbe <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001c06:	2003      	movs	r0, #3
}
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}

08001c0c <HAL_UART_Init>:
{
 8001c0c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001c0e:	4604      	mov	r4, r0
 8001c10:	b360      	cbz	r0, 8001c6c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c12:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001c16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c1a:	b91b      	cbnz	r3, 8001c24 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001c1c:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001c20:	f001 fc84 	bl	800352c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001c24:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001c26:	2324      	movs	r3, #36	; 0x24
 8001c28:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7ff fe33 	bl	80018a0 <UART_SetConfig>
 8001c3a:	2801      	cmp	r0, #1
 8001c3c:	d016      	beq.n	8001c6c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c40:	b113      	cbz	r3, 8001c48 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fed2 	bl	80019ec <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c58:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001c60:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001c62:	601a      	str	r2, [r3, #0]
}
 8001c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001c68:	f7ff bf9e 	b.w	8001ba8 <UART_CheckIdleState>
}
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	bd10      	pop	{r4, pc}

08001c70 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c70:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001c72:	f000 fe59 	bl	8002928 <vTaskStartScheduler>
  
  return osOK;
}
 8001c76:	2000      	movs	r0, #0
 8001c78:	bd08      	pop	{r3, pc}

08001c7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c7a:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c7c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001c80:	8a02      	ldrh	r2, [r0, #16]
{
 8001c82:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c84:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001c88:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001c8a:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001c8c:	bf14      	ite	ne
 8001c8e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c90:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c92:	a803      	add	r0, sp, #12
 8001c94:	9001      	str	r0, [sp, #4]
 8001c96:	9400      	str	r4, [sp, #0]
 8001c98:	4628      	mov	r0, r5
 8001c9a:	f000 fd75 	bl	8002788 <xTaskCreate>
 8001c9e:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ca0:	bf0c      	ite	eq
 8001ca2:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001ca4:	2000      	movne	r0, #0
}
 8001ca6:	b005      	add	sp, #20
 8001ca8:	bd30      	pop	{r4, r5, pc}

08001caa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001caa:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001cac:	2800      	cmp	r0, #0
 8001cae:	bf08      	it	eq
 8001cb0:	2001      	moveq	r0, #1
 8001cb2:	f000 ff87 	bl	8002bc4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	bd08      	pop	{r3, pc}

08001cba <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f000 bc2c 	b.w	8002518 <xQueueCreateMutex>

08001cc0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cc0:	f100 0308 	add.w	r3, r0, #8
 8001cc4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cc6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cca:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ccc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cce:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001cd0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001cd2:	6003      	str	r3, [r0, #0]
 8001cd4:	4770      	bx	lr

08001cd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	6103      	str	r3, [r0, #16]
 8001cda:	4770      	bx	lr

08001cdc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001cdc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001cde:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ce8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001cea:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cec:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001cee:	3301      	adds	r3, #1
 8001cf0:	6003      	str	r3, [r0, #0]
 8001cf2:	4770      	bx	lr

08001cf4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cf4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cf6:	1c53      	adds	r3, r2, #1
{
 8001cf8:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001cfa:	d10a      	bne.n	8001d12 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cfc:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d02:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d04:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d06:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d08:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d0a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	6003      	str	r3, [r0, #0]
 8001d10:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d12:	f100 0308 	add.w	r3, r0, #8
 8001d16:	685c      	ldr	r4, [r3, #4]
 8001d18:	6825      	ldr	r5, [r4, #0]
 8001d1a:	42aa      	cmp	r2, r5
 8001d1c:	d3ef      	bcc.n	8001cfe <vListInsert+0xa>
 8001d1e:	4623      	mov	r3, r4
 8001d20:	e7f9      	b.n	8001d16 <vListInsert+0x22>

08001d22 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d22:	6841      	ldr	r1, [r0, #4]
 8001d24:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d26:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d28:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d2a:	6882      	ldr	r2, [r0, #8]
 8001d2c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d32:	bf08      	it	eq
 8001d34:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d36:	2200      	movs	r2, #0
 8001d38:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	3801      	subs	r0, #1
 8001d3e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001d40:	4770      	bx	lr
	...

08001d44 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <prvTaskExitError+0x2c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	d008      	beq.n	8001d5e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d50:	f383 8811 	msr	BASEPRI, r3
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	e7fe      	b.n	8001d5c <prvTaskExitError+0x18>
 8001d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d62:	f383 8811 	msr	BASEPRI, r3
 8001d66:	f3bf 8f6f 	isb	sy
 8001d6a:	f3bf 8f4f 	dsb	sy
 8001d6e:	e7fe      	b.n	8001d6e <prvTaskExitError+0x2a>
 8001d70:	20000004 	.word	0x20000004

08001d74 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001d74:	4806      	ldr	r0, [pc, #24]	; (8001d90 <prvPortStartFirstTask+0x1c>)
 8001d76:	6800      	ldr	r0, [r0, #0]
 8001d78:	6800      	ldr	r0, [r0, #0]
 8001d7a:	f380 8808 	msr	MSP, r0
 8001d7e:	b662      	cpsie	i
 8001d80:	b661      	cpsie	f
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	df00      	svc	0
 8001d8c:	bf00      	nop
 8001d8e:	0000      	.short	0x0000
 8001d90:	e000ed08 	.word	0xe000ed08

08001d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001da4 <vPortEnableVFP+0x10>
 8001d98:	6801      	ldr	r1, [r0, #0]
 8001d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001d9e:	6001      	str	r1, [r0, #0]
 8001da0:	4770      	bx	lr
 8001da2:	0000      	.short	0x0000
 8001da4:	e000ed88 	.word	0xe000ed88

08001da8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dac:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <pxPortInitialiseStack+0x28>)
 8001db2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001db6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001dba:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001dbe:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001dc2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001dc6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001dca:	3844      	subs	r0, #68	; 0x44
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	08001d45 	.word	0x08001d45
	...

08001de0 <SVC_Handler>:
	__asm volatile (
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <pxCurrentTCBConst2>)
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	6808      	ldr	r0, [r1, #0]
 8001de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dea:	f380 8809 	msr	PSP, r0
 8001dee:	f3bf 8f6f 	isb	sy
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f380 8811 	msr	BASEPRI, r0
 8001dfa:	4770      	bx	lr
 8001dfc:	f3af 8000 	nop.w

08001e00 <pxCurrentTCBConst2>:
 8001e00:	20000cb0 	.word	0x20000cb0

08001e04 <vPortEnterCritical>:
 8001e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e08:	f383 8811 	msr	BASEPRI, r3
 8001e0c:	f3bf 8f6f 	isb	sy
 8001e10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <vPortEnterCritical+0x3c>)
 8001e16:	6813      	ldr	r3, [r2, #0]
 8001e18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001e1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001e1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001e1e:	d10d      	bne.n	8001e3c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <vPortEnterCritical+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001e28:	d008      	beq.n	8001e3c <vPortEnterCritical+0x38>
 8001e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	e7fe      	b.n	8001e3a <vPortEnterCritical+0x36>
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000004 	.word	0x20000004
 8001e44:	e000ed04 	.word	0xe000ed04

08001e48 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001e48:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <vPortExitCritical+0x24>)
 8001e4a:	6813      	ldr	r3, [r2, #0]
 8001e4c:	b943      	cbnz	r3, 8001e60 <vPortExitCritical+0x18>
 8001e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e52:	f383 8811 	msr	BASEPRI, r3
 8001e56:	f3bf 8f6f 	isb	sy
 8001e5a:	f3bf 8f4f 	dsb	sy
 8001e5e:	e7fe      	b.n	8001e5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001e60:	3b01      	subs	r3, #1
 8001e62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001e64:	b90b      	cbnz	r3, 8001e6a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	4770      	bx	lr
 8001e6c:	20000004 	.word	0x20000004

08001e70 <PendSV_Handler>:
	__asm volatile
 8001e70:	f3ef 8009 	mrs	r0, PSP
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <pxCurrentTCBConst>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	f01e 0f10 	tst.w	lr, #16
 8001e80:	bf08      	it	eq
 8001e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e8a:	6010      	str	r0, [r2, #0]
 8001e8c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e94:	f380 8811 	msr	BASEPRI, r0
 8001e98:	f3bf 8f4f 	dsb	sy
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f000 feee 	bl	8002c80 <vTaskSwitchContext>
 8001ea4:	f04f 0000 	mov.w	r0, #0
 8001ea8:	f380 8811 	msr	BASEPRI, r0
 8001eac:	bc08      	pop	{r3}
 8001eae:	6819      	ldr	r1, [r3, #0]
 8001eb0:	6808      	ldr	r0, [r1, #0]
 8001eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb6:	f01e 0f10 	tst.w	lr, #16
 8001eba:	bf08      	it	eq
 8001ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001ec0:	f380 8809 	msr	PSP, r0
 8001ec4:	f3bf 8f6f 	isb	sy
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	f3af 8000 	nop.w

08001ed0 <pxCurrentTCBConst>:
 8001ed0:	20000cb0 	.word	0x20000cb0

08001ed4 <SysTick_Handler>:
{
 8001ed4:	b508      	push	{r3, lr}
	__asm volatile
 8001ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eda:	f383 8811 	msr	BASEPRI, r3
 8001ede:	f3bf 8f6f 	isb	sy
 8001ee2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001ee6:	f000 fd63 	bl	80029b0 <xTaskIncrementTick>
 8001eea:	b118      	cbz	r0, 8001ef4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <SysTick_Handler+0x28>)
 8001eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f383 8811 	msr	BASEPRI, r3
 8001efa:	bd08      	pop	{r3, pc}
 8001efc:	e000ed04 	.word	0xe000ed04

08001f00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <vPortSetupTimerInterrupt+0x1c>)
 8001f02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <vPortSetupTimerInterrupt+0x20>)
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <vPortSetupTimerInterrupt+0x24>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2000000c 	.word	0x2000000c
 8001f20:	e000e014 	.word	0xe000e014
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f28:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <xPortStartScheduler+0xc8>)
 8001f2a:	4a32      	ldr	r2, [pc, #200]	; (8001ff4 <xPortStartScheduler+0xcc>)
{
 8001f2c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	4291      	cmp	r1, r2
 8001f32:	d108      	bne.n	8001f46 <xPortStartScheduler+0x1e>
	__asm volatile
 8001f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f38:	f383 8811 	msr	BASEPRI, r3
 8001f3c:	f3bf 8f6f 	isb	sy
 8001f40:	f3bf 8f4f 	dsb	sy
 8001f44:	e7fe      	b.n	8001f44 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <xPortStartScheduler+0xd0>)
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d108      	bne.n	8001f60 <xPortStartScheduler+0x38>
 8001f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f52:	f383 8811 	msr	BASEPRI, r3
 8001f56:	f3bf 8f6f 	isb	sy
 8001f5a:	f3bf 8f4f 	dsb	sy
 8001f5e:	e7fe      	b.n	8001f5e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f60:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <xPortStartScheduler+0xd4>)
 8001f62:	781a      	ldrb	r2, [r3, #0]
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f68:	22ff      	movs	r2, #255	; 0xff
 8001f6a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f6c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f6e:	4a24      	ldr	r2, [pc, #144]	; (8002000 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f76:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001f7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f7e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <xPortStartScheduler+0xdc>)
 8001f82:	2207      	movs	r2, #7
 8001f84:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f86:	2100      	movs	r1, #0
 8001f88:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001f8c:	0600      	lsls	r0, r0, #24
 8001f8e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001f92:	d423      	bmi.n	8001fdc <xPortStartScheduler+0xb4>
 8001f94:	b101      	cbz	r1, 8001f98 <xPortStartScheduler+0x70>
 8001f96:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f9c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001fa0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001fa2:	9b01      	ldr	r3, [sp, #4]
 8001fa4:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <xPortStartScheduler+0xd4>)
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001faa:	4b17      	ldr	r3, [pc, #92]	; (8002008 <xPortStartScheduler+0xe0>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001fb2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001fba:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001fbc:	f7ff ffa0 	bl	8001f00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <xPortStartScheduler+0xe4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8001fc6:	f7ff fee5 	bl	8001d94 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001fca:	4a11      	ldr	r2, [pc, #68]	; (8002010 <xPortStartScheduler+0xe8>)
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001fd2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001fd4:	f7ff fece 	bl	8001d74 <prvPortStartFirstTask>
	prvTaskExitError();
 8001fd8:	f7ff feb4 	bl	8001d44 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001fdc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001fe0:	0052      	lsls	r2, r2, #1
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f88d 2003 	strb.w	r2, [sp, #3]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	4622      	mov	r2, r4
 8001fec:	e7cc      	b.n	8001f88 <xPortStartScheduler+0x60>
 8001fee:	bf00      	nop
 8001ff0:	e000ed00 	.word	0xe000ed00
 8001ff4:	410fc271 	.word	0x410fc271
 8001ff8:	410fc270 	.word	0x410fc270
 8001ffc:	e000e400 	.word	0xe000e400
 8002000:	20000090 	.word	0x20000090
 8002004:	20000094 	.word	0x20000094
 8002008:	e000ed20 	.word	0xe000ed20
 800200c:	20000004 	.word	0x20000004
 8002010:	e000ef34 	.word	0xe000ef34

08002014 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002014:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <prvInsertBlockIntoFreeList+0x40>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4282      	cmp	r2, r0
 800201c:	d318      	bcc.n	8002050 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800201e:	685c      	ldr	r4, [r3, #4]
 8002020:	1919      	adds	r1, r3, r4
 8002022:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002024:	bf01      	itttt	eq
 8002026:	6841      	ldreq	r1, [r0, #4]
 8002028:	4618      	moveq	r0, r3
 800202a:	1909      	addeq	r1, r1, r4
 800202c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800202e:	6844      	ldr	r4, [r0, #4]
 8002030:	1901      	adds	r1, r0, r4
 8002032:	428a      	cmp	r2, r1
 8002034:	d107      	bne.n	8002046 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <prvInsertBlockIntoFreeList+0x44>)
 8002038:	6809      	ldr	r1, [r1, #0]
 800203a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800203c:	bf1f      	itttt	ne
 800203e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002040:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002042:	1909      	addne	r1, r1, r4
 8002044:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002046:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002048:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800204a:	bf18      	it	ne
 800204c:	6018      	strne	r0, [r3, #0]
 800204e:	bd10      	pop	{r4, pc}
 8002050:	4613      	mov	r3, r2
 8002052:	e7e1      	b.n	8002018 <prvInsertBlockIntoFreeList+0x4>
 8002054:	20000ca8 	.word	0x20000ca8
 8002058:	20000098 	.word	0x20000098

0800205c <pvPortMalloc>:
{
 800205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002060:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002062:	f000 fc9d 	bl	80029a0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002066:	493e      	ldr	r1, [pc, #248]	; (8002160 <pvPortMalloc+0x104>)
 8002068:	4d3e      	ldr	r5, [pc, #248]	; (8002164 <pvPortMalloc+0x108>)
 800206a:	680b      	ldr	r3, [r1, #0]
 800206c:	bb0b      	cbnz	r3, 80020b2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800206e:	4a3e      	ldr	r2, [pc, #248]	; (8002168 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002070:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002072:	bf1f      	itttt	ne
 8002074:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002076:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800207a:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
 800207e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002080:	bf14      	ite	ne
 8002082:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002084:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002088:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800208a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800208c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002090:	4e36      	ldr	r6, [pc, #216]	; (800216c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8002092:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002094:	2000      	movs	r0, #0
 8002096:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002098:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800209a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800209c:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800209e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80020a0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020a2:	4b33      	ldr	r3, [pc, #204]	; (8002170 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80020a4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020a6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020a8:	4b32      	ldr	r3, [pc, #200]	; (8002174 <pvPortMalloc+0x118>)
 80020aa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80020ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80020b0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80020b2:	682f      	ldr	r7, [r5, #0]
 80020b4:	4227      	tst	r7, r4
 80020b6:	d116      	bne.n	80020e6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80020b8:	2c00      	cmp	r4, #0
 80020ba:	d041      	beq.n	8002140 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80020bc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80020c0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80020c2:	bf1c      	itt	ne
 80020c4:	f023 0307 	bicne.w	r3, r3, #7
 80020c8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020ca:	b163      	cbz	r3, 80020e6 <pvPortMalloc+0x8a>
 80020cc:	4a29      	ldr	r2, [pc, #164]	; (8002174 <pvPortMalloc+0x118>)
 80020ce:	6816      	ldr	r6, [r2, #0]
 80020d0:	42b3      	cmp	r3, r6
 80020d2:	4690      	mov	r8, r2
 80020d4:	d807      	bhi.n	80020e6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80020d6:	4a25      	ldr	r2, [pc, #148]	; (800216c <pvPortMalloc+0x110>)
 80020d8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020da:	6868      	ldr	r0, [r5, #4]
 80020dc:	4283      	cmp	r3, r0
 80020de:	d804      	bhi.n	80020ea <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80020e0:	6809      	ldr	r1, [r1, #0]
 80020e2:	428d      	cmp	r5, r1
 80020e4:	d107      	bne.n	80020f6 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80020e6:	2400      	movs	r4, #0
 80020e8:	e02a      	b.n	8002140 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020ea:	682c      	ldr	r4, [r5, #0]
 80020ec:	2c00      	cmp	r4, #0
 80020ee:	d0f7      	beq.n	80020e0 <pvPortMalloc+0x84>
 80020f0:	462a      	mov	r2, r5
 80020f2:	4625      	mov	r5, r4
 80020f4:	e7f1      	b.n	80020da <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020f6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80020f8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80020fa:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80020fc:	1ac2      	subs	r2, r0, r3
 80020fe:	2a10      	cmp	r2, #16
 8002100:	d90f      	bls.n	8002122 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002102:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002104:	0741      	lsls	r1, r0, #29
 8002106:	d008      	beq.n	800211a <pvPortMalloc+0xbe>
 8002108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	e7fe      	b.n	8002118 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800211a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800211c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800211e:	f7ff ff79 	bl	8002014 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002122:	4913      	ldr	r1, [pc, #76]	; (8002170 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002124:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002126:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002128:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800212a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800212c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800212e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002132:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002136:	bf38      	it	cc
 8002138:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800213a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800213c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800213e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002140:	f000 fcc8 	bl	8002ad4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002144:	0763      	lsls	r3, r4, #29
 8002146:	d008      	beq.n	800215a <pvPortMalloc+0xfe>
 8002148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	e7fe      	b.n	8002158 <pvPortMalloc+0xfc>
}
 800215a:	4620      	mov	r0, r4
 800215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002160:	20000098 	.word	0x20000098
 8002164:	20000c9c 	.word	0x20000c9c
 8002168:	2000009c 	.word	0x2000009c
 800216c:	20000ca8 	.word	0x20000ca8
 8002170:	20000ca4 	.word	0x20000ca4
 8002174:	20000ca0 	.word	0x20000ca0

08002178 <vPortFree>:
{
 8002178:	b510      	push	{r4, lr}
	if( pv != NULL )
 800217a:	4604      	mov	r4, r0
 800217c:	b370      	cbz	r0, 80021dc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800217e:	4a18      	ldr	r2, [pc, #96]	; (80021e0 <vPortFree+0x68>)
 8002180:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	4213      	tst	r3, r2
 8002188:	d108      	bne.n	800219c <vPortFree+0x24>
 800218a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218e:	f383 8811 	msr	BASEPRI, r3
 8002192:	f3bf 8f6f 	isb	sy
 8002196:	f3bf 8f4f 	dsb	sy
 800219a:	e7fe      	b.n	800219a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800219c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80021a0:	b141      	cbz	r1, 80021b4 <vPortFree+0x3c>
 80021a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a6:	f383 8811 	msr	BASEPRI, r3
 80021aa:	f3bf 8f6f 	isb	sy
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	e7fe      	b.n	80021b2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80021b4:	ea23 0302 	bic.w	r3, r3, r2
 80021b8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80021bc:	f000 fbf0 	bl	80029a0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80021c0:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <vPortFree+0x6c>)
 80021c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80021c6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80021c8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80021cc:	440b      	add	r3, r1
 80021ce:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80021d0:	f7ff ff20 	bl	8002014 <prvInsertBlockIntoFreeList>
}
 80021d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80021d8:	f000 bc7c 	b.w	8002ad4 <xTaskResumeAll>
 80021dc:	bd10      	pop	{r4, pc}
 80021de:	bf00      	nop
 80021e0:	20000c9c 	.word	0x20000c9c
 80021e4:	20000ca0 	.word	0x20000ca0

080021e8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021ee:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80021f0:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021f2:	b942      	cbnz	r2, 8002206 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021f4:	6805      	ldr	r5, [r0, #0]
 80021f6:	b99d      	cbnz	r5, 8002220 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80021f8:	6840      	ldr	r0, [r0, #4]
 80021fa:	f000 fe7d 	bl	8002ef8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80021fe:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002200:	3601      	adds	r6, #1
 8002202:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002204:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002206:	b96d      	cbnz	r5, 8002224 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002208:	6880      	ldr	r0, [r0, #8]
 800220a:	f001 fa0f 	bl	800362c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800220e:	68a3      	ldr	r3, [r4, #8]
 8002210:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002212:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002214:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002216:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002218:	4293      	cmp	r3, r2
 800221a:	d301      	bcc.n	8002220 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002220:	2000      	movs	r0, #0
 8002222:	e7ed      	b.n	8002200 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002224:	68c0      	ldr	r0, [r0, #12]
 8002226:	f001 fa01 	bl	800362c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800222a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800222c:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800222e:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002230:	425b      	negs	r3, r3
 8002232:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002234:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002236:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002238:	bf3e      	ittt	cc
 800223a:	6862      	ldrcc	r2, [r4, #4]
 800223c:	189b      	addcc	r3, r3, r2
 800223e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002240:	2d02      	cmp	r5, #2
 8002242:	d1ed      	bne.n	8002220 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002244:	b10e      	cbz	r6, 800224a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002246:	3e01      	subs	r6, #1
 8002248:	e7ea      	b.n	8002220 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800224a:	4630      	mov	r0, r6
 800224c:	e7d8      	b.n	8002200 <prvCopyDataToQueue+0x18>

0800224e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800224e:	4603      	mov	r3, r0
 8002250:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002254:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002256:	b162      	cbz	r2, 8002272 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002258:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800225a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800225c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800225e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002260:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002262:	bf24      	itt	cs
 8002264:	6819      	ldrcs	r1, [r3, #0]
 8002266:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002268:	68d9      	ldr	r1, [r3, #12]
	}
}
 800226a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800226e:	f001 b9dd 	b.w	800362c <memcpy>
}
 8002272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002276:	4770      	bx	lr

08002278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002278:	b570      	push	{r4, r5, r6, lr}
 800227a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800227c:	f7ff fdc2 	bl	8001e04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002280:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002284:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002288:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800228a:	2d00      	cmp	r5, #0
 800228c:	dc14      	bgt.n	80022b8 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800228e:	23ff      	movs	r3, #255	; 0xff
 8002290:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002294:	f7ff fdd8 	bl	8001e48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002298:	f7ff fdb4 	bl	8001e04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800229c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022a0:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80022a4:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80022a6:	2d00      	cmp	r5, #0
 80022a8:	dc12      	bgt.n	80022d0 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80022aa:	23ff      	movs	r3, #255	; 0xff
 80022ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80022b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80022b4:	f7ff bdc8 	b.w	8001e48 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0e7      	beq.n	800228e <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022be:	4630      	mov	r0, r6
 80022c0:	f000 fd32 	bl	8002d28 <xTaskRemoveFromEventList>
 80022c4:	b108      	cbz	r0, 80022ca <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80022c6:	f000 fdbb 	bl	8002e40 <vTaskMissedYield>
 80022ca:	3d01      	subs	r5, #1
 80022cc:	b26d      	sxtb	r5, r5
 80022ce:	e7dc      	b.n	800228a <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022d0:	6923      	ldr	r3, [r4, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0e9      	beq.n	80022aa <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022d6:	4630      	mov	r0, r6
 80022d8:	f000 fd26 	bl	8002d28 <xTaskRemoveFromEventList>
 80022dc:	b108      	cbz	r0, 80022e2 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80022de:	f000 fdaf 	bl	8002e40 <vTaskMissedYield>
 80022e2:	3d01      	subs	r5, #1
 80022e4:	b26d      	sxtb	r5, r5
 80022e6:	e7de      	b.n	80022a6 <prvUnlockQueue+0x2e>

080022e8 <xQueueGenericReset>:
{
 80022e8:	b538      	push	{r3, r4, r5, lr}
 80022ea:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80022ec:	4604      	mov	r4, r0
 80022ee:	b940      	cbnz	r0, 8002302 <xQueueGenericReset+0x1a>
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	e7fe      	b.n	8002300 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002302:	f7ff fd7f 	bl	8001e04 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002306:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800230a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800230c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800230e:	4343      	muls	r3, r0
 8002310:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002312:	1a1b      	subs	r3, r3, r0
 8002314:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002316:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002318:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800231a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800231c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800231e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002320:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002324:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002328:	b995      	cbnz	r5, 8002350 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800232a:	6923      	ldr	r3, [r4, #16]
 800232c:	b163      	cbz	r3, 8002348 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800232e:	f104 0010 	add.w	r0, r4, #16
 8002332:	f000 fcf9 	bl	8002d28 <xTaskRemoveFromEventList>
 8002336:	b138      	cbz	r0, 8002348 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <xQueueGenericReset+0x7c>)
 800233a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002348:	f7ff fd7e 	bl	8001e48 <vPortExitCritical>
}
 800234c:	2001      	movs	r0, #1
 800234e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002350:	f104 0010 	add.w	r0, r4, #16
 8002354:	f7ff fcb4 	bl	8001cc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002358:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800235c:	f7ff fcb0 	bl	8001cc0 <vListInitialise>
 8002360:	e7f2      	b.n	8002348 <xQueueGenericReset+0x60>
 8002362:	bf00      	nop
 8002364:	e000ed04 	.word	0xe000ed04

08002368 <xQueueGenericCreate>:
	{
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800236c:	4606      	mov	r6, r0
 800236e:	b940      	cbnz	r0, 8002382 <xQueueGenericCreate+0x1a>
 8002370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	e7fe      	b.n	8002380 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002382:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002384:	3048      	adds	r0, #72	; 0x48
 8002386:	f7ff fe69 	bl	800205c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800238a:	4604      	mov	r4, r0
 800238c:	b138      	cbz	r0, 800239e <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800238e:	b945      	cbnz	r5, 80023a2 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002390:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002392:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002394:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002396:	2101      	movs	r1, #1
 8002398:	4620      	mov	r0, r4
 800239a:	f7ff ffa5 	bl	80022e8 <xQueueGenericReset>
	}
 800239e:	4620      	mov	r0, r4
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80023a2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023a6:	6003      	str	r3, [r0, #0]
 80023a8:	e7f3      	b.n	8002392 <xQueueGenericCreate+0x2a>
	...

080023ac <xQueueGenericSend>:
{
 80023ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023b0:	4689      	mov	r9, r1
 80023b2:	9201      	str	r2, [sp, #4]
 80023b4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80023b6:	4604      	mov	r4, r0
 80023b8:	b940      	cbnz	r0, 80023cc <xQueueGenericSend+0x20>
 80023ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	e7fe      	b.n	80023ca <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023cc:	2900      	cmp	r1, #0
 80023ce:	f040 8088 	bne.w	80024e2 <xQueueGenericSend+0x136>
 80023d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8084 	beq.w	80024e2 <xQueueGenericSend+0x136>
 80023da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	e7fe      	b.n	80023ea <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023ec:	9e01      	ldr	r6, [sp, #4]
 80023ee:	2e00      	cmp	r6, #0
 80023f0:	f000 8082 	beq.w	80024f8 <xQueueGenericSend+0x14c>
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	e7fe      	b.n	8002404 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002406:	9d01      	ldr	r5, [sp, #4]
 8002408:	b91d      	cbnz	r5, 8002412 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800240a:	f7ff fd1d 	bl	8001e48 <vPortExitCritical>
			return errQUEUE_FULL;
 800240e:	2000      	movs	r0, #0
 8002410:	e058      	b.n	80024c4 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002412:	b916      	cbnz	r6, 800241a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8002414:	a802      	add	r0, sp, #8
 8002416:	f000 fcc9 	bl	8002dac <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800241a:	f7ff fd15 	bl	8001e48 <vPortExitCritical>
		vTaskSuspendAll();
 800241e:	f000 fabf 	bl	80029a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002422:	f7ff fcef 	bl	8001e04 <vPortEnterCritical>
 8002426:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800242a:	2bff      	cmp	r3, #255	; 0xff
 800242c:	bf08      	it	eq
 800242e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002432:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002436:	2bff      	cmp	r3, #255	; 0xff
 8002438:	bf08      	it	eq
 800243a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800243e:	f7ff fd03 	bl	8001e48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002442:	a901      	add	r1, sp, #4
 8002444:	a802      	add	r0, sp, #8
 8002446:	f000 fcc1 	bl	8002dcc <xTaskCheckForTimeOut>
 800244a:	2800      	cmp	r0, #0
 800244c:	d143      	bne.n	80024d6 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800244e:	f7ff fcd9 	bl	8001e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002452:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002454:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002456:	f7ff fcf7 	bl	8001e48 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800245a:	42ae      	cmp	r6, r5
 800245c:	d135      	bne.n	80024ca <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800245e:	9901      	ldr	r1, [sp, #4]
 8002460:	f104 0010 	add.w	r0, r4, #16
 8002464:	f000 fc46 	bl	8002cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002468:	4620      	mov	r0, r4
 800246a:	f7ff ff05 	bl	8002278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800246e:	f000 fb31 	bl	8002ad4 <xTaskResumeAll>
 8002472:	b938      	cbnz	r0, 8002484 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002474:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002478:	f8ca 3000 	str.w	r3, [sl]
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002486:	f7ff fcbd 	bl	8001e04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800248a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800248c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800248e:	429a      	cmp	r2, r3
 8002490:	d301      	bcc.n	8002496 <xQueueGenericSend+0xea>
 8002492:	2f02      	cmp	r7, #2
 8002494:	d1b7      	bne.n	8002406 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002496:	463a      	mov	r2, r7
 8002498:	4649      	mov	r1, r9
 800249a:	4620      	mov	r0, r4
 800249c:	f7ff fea4 	bl	80021e8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024a2:	b11b      	cbz	r3, 80024ac <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80024a8:	f000 fc3e 	bl	8002d28 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80024ac:	b138      	cbz	r0, 80024be <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <xQueueGenericSend+0x168>)
 80024b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80024be:	f7ff fcc3 	bl	8001e48 <vPortExitCritical>
				return pdPASS;
 80024c2:	2001      	movs	r0, #1
}
 80024c4:	b004      	add	sp, #16
 80024c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80024ca:	4620      	mov	r0, r4
 80024cc:	f7ff fed4 	bl	8002278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024d0:	f000 fb00 	bl	8002ad4 <xTaskResumeAll>
 80024d4:	e7d6      	b.n	8002484 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80024d6:	4620      	mov	r0, r4
 80024d8:	f7ff fece 	bl	8002278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024dc:	f000 fafa 	bl	8002ad4 <xTaskResumeAll>
 80024e0:	e795      	b.n	800240e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024e2:	2f02      	cmp	r7, #2
 80024e4:	d102      	bne.n	80024ec <xQueueGenericSend+0x140>
 80024e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d10a      	bne.n	8002502 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ec:	f000 fcae 	bl	8002e4c <xTaskGetSchedulerState>
 80024f0:	2800      	cmp	r0, #0
 80024f2:	f43f af7b 	beq.w	80023ec <xQueueGenericSend+0x40>
 80024f6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80024f8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80024fc:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002514 <xQueueGenericSend+0x168>
 8002500:	e7c1      	b.n	8002486 <xQueueGenericSend+0xda>
 8002502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002506:	f383 8811 	msr	BASEPRI, r3
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	f3bf 8f4f 	dsb	sy
 8002512:	e7fe      	b.n	8002512 <xQueueGenericSend+0x166>
 8002514:	e000ed04 	.word	0xe000ed04

08002518 <xQueueCreateMutex>:
	{
 8002518:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800251a:	4602      	mov	r2, r0
 800251c:	2100      	movs	r1, #0
 800251e:	2001      	movs	r0, #1
 8002520:	f7ff ff22 	bl	8002368 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8002524:	4604      	mov	r4, r0
 8002526:	b138      	cbz	r0, 8002538 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8002528:	2300      	movs	r3, #0
 800252a:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800252c:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800252e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002530:	461a      	mov	r2, r3
 8002532:	4619      	mov	r1, r3
 8002534:	f7ff ff3a 	bl	80023ac <xQueueGenericSend>
	}
 8002538:	4620      	mov	r0, r4
 800253a:	bd10      	pop	{r4, pc}

0800253c <xQueueGenericReceive>:
{
 800253c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002540:	4688      	mov	r8, r1
 8002542:	9201      	str	r2, [sp, #4]
 8002544:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8002546:	4604      	mov	r4, r0
 8002548:	b940      	cbnz	r0, 800255c <xQueueGenericReceive+0x20>
 800254a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254e:	f383 8811 	msr	BASEPRI, r3
 8002552:	f3bf 8f6f 	isb	sy
 8002556:	f3bf 8f4f 	dsb	sy
 800255a:	e7fe      	b.n	800255a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800255c:	2900      	cmp	r1, #0
 800255e:	f040 80a5 	bne.w	80026ac <xQueueGenericReceive+0x170>
 8002562:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a1 	beq.w	80026ac <xQueueGenericReceive+0x170>
 800256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256e:	f383 8811 	msr	BASEPRI, r3
 8002572:	f3bf 8f6f 	isb	sy
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	e7fe      	b.n	800257a <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800257c:	9e01      	ldr	r6, [sp, #4]
 800257e:	2e00      	cmp	r6, #0
 8002580:	f000 809a 	beq.w	80026b8 <xQueueGenericReceive+0x17c>
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	e7fe      	b.n	8002594 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002596:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002598:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800259a:	2b00      	cmp	r3, #0
 800259c:	d06d      	beq.n	800267a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800259e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025a2:	e05f      	b.n	8002664 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 80025a4:	9d01      	ldr	r5, [sp, #4]
 80025a6:	b91d      	cbnz	r5, 80025b0 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 80025a8:	f7ff fc4e 	bl	8001e48 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80025ac:	4628      	mov	r0, r5
 80025ae:	e067      	b.n	8002680 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 80025b0:	b916      	cbnz	r6, 80025b8 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 80025b2:	a802      	add	r0, sp, #8
 80025b4:	f000 fbfa 	bl	8002dac <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80025b8:	f7ff fc46 	bl	8001e48 <vPortExitCritical>
		vTaskSuspendAll();
 80025bc:	f000 f9f0 	bl	80029a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025c0:	f7ff fc20 	bl	8001e04 <vPortEnterCritical>
 80025c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80025c8:	2bff      	cmp	r3, #255	; 0xff
 80025ca:	bf08      	it	eq
 80025cc:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80025d0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80025d4:	2bff      	cmp	r3, #255	; 0xff
 80025d6:	bf08      	it	eq
 80025d8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80025dc:	f7ff fc34 	bl	8001e48 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025e0:	a901      	add	r1, sp, #4
 80025e2:	a802      	add	r0, sp, #8
 80025e4:	f000 fbf2 	bl	8002dcc <xTaskCheckForTimeOut>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d152      	bne.n	8002692 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 80025ec:	f7ff fc0a 	bl	8001e04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025f0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80025f2:	f7ff fc29 	bl	8001e48 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025f6:	2d00      	cmp	r5, #0
 80025f8:	d145      	bne.n	8002686 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	b933      	cbnz	r3, 800260c <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 80025fe:	f7ff fc01 	bl	8001e04 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002602:	6860      	ldr	r0, [r4, #4]
 8002604:	f000 fc32 	bl	8002e6c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8002608:	f7ff fc1e 	bl	8001e48 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800260c:	9901      	ldr	r1, [sp, #4]
 800260e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002612:	f000 fb6f 	bl	8002cf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002616:	4620      	mov	r0, r4
 8002618:	f7ff fe2e 	bl	8002278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800261c:	f000 fa5a 	bl	8002ad4 <xTaskResumeAll>
 8002620:	b938      	cbnz	r0, 8002632 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8002622:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002626:	f8ca 3000 	str.w	r3, [sl]
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002634:	f7ff fbe6 	bl	8001e04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002638:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800263a:	2d00      	cmp	r5, #0
 800263c:	d0b2      	beq.n	80025a4 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800263e:	4641      	mov	r1, r8
 8002640:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002642:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002644:	f7ff fe03 	bl	800224e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8002648:	f1b9 0f00 	cmp.w	r9, #0
 800264c:	d1a3      	bne.n	8002596 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800264e:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002650:	3d01      	subs	r5, #1
 8002652:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002654:	b913      	cbnz	r3, 800265c <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002656:	f000 fc9f 	bl	8002f98 <pvTaskIncrementMutexHeldCount>
 800265a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800265c:	6923      	ldr	r3, [r4, #16]
 800265e:	b163      	cbz	r3, 800267a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002660:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002664:	f000 fb60 	bl	8002d28 <xTaskRemoveFromEventList>
 8002668:	b138      	cbz	r0, 800267a <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <xQueueGenericReceive+0x184>)
 800266c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800267a:	f7ff fbe5 	bl	8001e48 <vPortExitCritical>
				return pdPASS;
 800267e:	2001      	movs	r0, #1
}
 8002680:	b004      	add	sp, #16
 8002682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8002686:	4620      	mov	r0, r4
 8002688:	f7ff fdf6 	bl	8002278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800268c:	f000 fa22 	bl	8002ad4 <xTaskResumeAll>
 8002690:	e7cf      	b.n	8002632 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8002692:	4620      	mov	r0, r4
 8002694:	f7ff fdf0 	bl	8002278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002698:	f000 fa1c 	bl	8002ad4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800269c:	f7ff fbb2 	bl	8001e04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80026a0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80026a2:	f7ff fbd1 	bl	8001e48 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026a6:	2d00      	cmp	r5, #0
 80026a8:	d1c3      	bne.n	8002632 <xQueueGenericReceive+0xf6>
 80026aa:	e77f      	b.n	80025ac <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026ac:	f000 fbce 	bl	8002e4c <xTaskGetSchedulerState>
 80026b0:	2800      	cmp	r0, #0
 80026b2:	f43f af63 	beq.w	800257c <xQueueGenericReceive+0x40>
 80026b6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80026b8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80026ba:	f8df a004 	ldr.w	sl, [pc, #4]	; 80026c0 <xQueueGenericReceive+0x184>
 80026be:	e7b9      	b.n	8002634 <xQueueGenericReceive+0xf8>
 80026c0:	e000ed04 	.word	0xe000ed04

080026c4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <prvResetNextTaskUnblockTime+0x1c>)
 80026c6:	6813      	ldr	r3, [r2, #0]
 80026c8:	6819      	ldr	r1, [r3, #0]
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <prvResetNextTaskUnblockTime+0x20>)
 80026cc:	b919      	cbnz	r1, 80026d6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80026ce:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80026da:	68d2      	ldr	r2, [r2, #12]
 80026dc:	6852      	ldr	r2, [r2, #4]
 80026de:	e7f8      	b.n	80026d2 <prvResetNextTaskUnblockTime+0xe>
 80026e0:	20000cb4 	.word	0x20000cb4
 80026e4:	20000d8c 	.word	0x20000d8c

080026e8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026ec:	4e1b      	ldr	r6, [pc, #108]	; (800275c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80026ee:	681d      	ldr	r5, [r3, #0]
{
 80026f0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026f2:	6830      	ldr	r0, [r6, #0]
 80026f4:	3004      	adds	r0, #4
{
 80026f6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026f8:	f7ff fb13 	bl	8001d22 <uxListRemove>
 80026fc:	4633      	mov	r3, r6
 80026fe:	b940      	cbnz	r0, 8002712 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002700:	6831      	ldr	r1, [r6, #0]
 8002702:	4e17      	ldr	r6, [pc, #92]	; (8002760 <prvAddCurrentTaskToDelayedList+0x78>)
 8002704:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002706:	6832      	ldr	r2, [r6, #0]
 8002708:	2001      	movs	r0, #1
 800270a:	4088      	lsls	r0, r1
 800270c:	ea22 0200 	bic.w	r2, r2, r0
 8002710:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002712:	1c62      	adds	r2, r4, #1
 8002714:	d107      	bne.n	8002726 <prvAddCurrentTaskToDelayedList+0x3e>
 8002716:	b137      	cbz	r7, 8002726 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	4812      	ldr	r0, [pc, #72]	; (8002764 <prvAddCurrentTaskToDelayedList+0x7c>)
 800271c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800271e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002722:	f7ff badb 	b.w	8001cdc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002726:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002728:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800272a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800272c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800272e:	d907      	bls.n	8002740 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <prvAddCurrentTaskToDelayedList+0x80>)
 8002732:	6810      	ldr	r0, [r2, #0]
 8002734:	6819      	ldr	r1, [r3, #0]
}
 8002736:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800273a:	3104      	adds	r1, #4
 800273c:	f7ff bada 	b.w	8001cf4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <prvAddCurrentTaskToDelayedList+0x84>)
 8002742:	6810      	ldr	r0, [r2, #0]
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	3104      	adds	r1, #4
 8002748:	f7ff fad4 	bl	8001cf4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <prvAddCurrentTaskToDelayedList+0x88>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002752:	bf38      	it	cc
 8002754:	601c      	strcc	r4, [r3, #0]
 8002756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002758:	20000dd4 	.word	0x20000dd4
 800275c:	20000cb0 	.word	0x20000cb0
 8002760:	20000d5c 	.word	0x20000d5c
 8002764:	20000dac 	.word	0x20000dac
 8002768:	20000cb8 	.word	0x20000cb8
 800276c:	20000cb4 	.word	0x20000cb4
 8002770:	20000d8c 	.word	0x20000d8c

08002774 <prvTaskIsTaskSuspended.part.0>:
 8002774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002778:	f383 8811 	msr	BASEPRI, r3
 800277c:	f3bf 8f6f 	isb	sy
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	e7fe      	b.n	8002784 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08002788 <xTaskCreate>:
	{
 8002788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800278c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002790:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002792:	4650      	mov	r0, sl
	{
 8002794:	460f      	mov	r7, r1
 8002796:	4699      	mov	r9, r3
 8002798:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800279a:	f7ff fc5f 	bl	800205c <pvPortMalloc>
			if( pxStack != NULL )
 800279e:	4605      	mov	r5, r0
 80027a0:	2800      	cmp	r0, #0
 80027a2:	f000 8096 	beq.w	80028d2 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027a6:	2054      	movs	r0, #84	; 0x54
 80027a8:	f7ff fc58 	bl	800205c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80027ac:	4604      	mov	r4, r0
 80027ae:	2800      	cmp	r0, #0
 80027b0:	f000 808c 	beq.w	80028cc <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80027b4:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80027b8:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80027ba:	4455      	add	r5, sl
 80027bc:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80027be:	f025 0a07 	bic.w	sl, r5, #7
 80027c2:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80027c6:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027c8:	7859      	ldrb	r1, [r3, #1]
 80027ca:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80027ce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80027d2:	b109      	cbz	r1, 80027d8 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027d4:	42bb      	cmp	r3, r7
 80027d6:	d1f7      	bne.n	80027c8 <xTaskCreate+0x40>
 80027d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80027da:	2d06      	cmp	r5, #6
 80027dc:	bf28      	it	cs
 80027de:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027e0:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027e4:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80027e6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80027e8:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027ea:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027ec:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80027f0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027f4:	f7ff fa6f 	bl	8001cd6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027f8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027fc:	f104 0018 	add.w	r0, r4, #24
 8002800:	f7ff fa69 	bl	8001cd6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002804:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002808:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800280a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800280c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800280e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002812:	464a      	mov	r2, r9
 8002814:	4641      	mov	r1, r8
 8002816:	4650      	mov	r0, sl
 8002818:	f7ff fac6 	bl	8001da8 <pxPortInitialiseStack>
 800281c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800281e:	b106      	cbz	r6, 8002822 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002820:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002822:	f7ff faef 	bl	8001e04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002826:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002828:	4e32      	ldr	r6, [pc, #200]	; (80028f4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002920 <xTaskCreate+0x198>
 8002830:	3201      	adds	r2, #1
 8002832:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002834:	6835      	ldr	r5, [r6, #0]
 8002836:	2d00      	cmp	r5, #0
 8002838:	d14e      	bne.n	80028d8 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800283a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d11d      	bne.n	800287e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002842:	eb08 0005 	add.w	r0, r8, r5
 8002846:	3514      	adds	r5, #20
 8002848:	f7ff fa3a 	bl	8001cc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800284c:	2d8c      	cmp	r5, #140	; 0x8c
 800284e:	d1f8      	bne.n	8002842 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002850:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002924 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002854:	4d28      	ldr	r5, [pc, #160]	; (80028f8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002856:	4648      	mov	r0, r9
 8002858:	f7ff fa32 	bl	8001cc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800285c:	4628      	mov	r0, r5
 800285e:	f7ff fa2f 	bl	8001cc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002862:	4826      	ldr	r0, [pc, #152]	; (80028fc <xTaskCreate+0x174>)
 8002864:	f7ff fa2c 	bl	8001cc0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002868:	4825      	ldr	r0, [pc, #148]	; (8002900 <xTaskCreate+0x178>)
 800286a:	f7ff fa29 	bl	8001cc0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800286e:	4825      	ldr	r0, [pc, #148]	; (8002904 <xTaskCreate+0x17c>)
 8002870:	f7ff fa26 	bl	8001cc0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <xTaskCreate+0x180>)
 8002876:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <xTaskCreate+0x184>)
 800287c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800287e:	4a24      	ldr	r2, [pc, #144]	; (8002910 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002880:	4924      	ldr	r1, [pc, #144]	; (8002914 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002882:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002884:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002886:	3301      	adds	r3, #1
 8002888:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800288a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800288c:	2501      	movs	r5, #1
 800288e:	fa05 f302 	lsl.w	r3, r5, r2
 8002892:	4303      	orrs	r3, r0
 8002894:	2014      	movs	r0, #20
 8002896:	600b      	str	r3, [r1, #0]
 8002898:	fb00 8002 	mla	r0, r0, r2, r8
 800289c:	4639      	mov	r1, r7
 800289e:	f7ff fa1d 	bl	8001cdc <vListInsertEnd>
	taskEXIT_CRITICAL();
 80028a2:	f7ff fad1 	bl	8001e48 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <xTaskCreate+0x190>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b163      	cbz	r3, 80028c6 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028ac:	6833      	ldr	r3, [r6, #0]
 80028ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d207      	bcs.n	80028c6 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <xTaskCreate+0x194>)
 80028b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	f3bf 8f6f 	isb	sy
	}
 80028c6:	4628      	mov	r0, r5
 80028c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80028cc:	4628      	mov	r0, r5
 80028ce:	f7ff fc53 	bl	8002178 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028d2:	f04f 35ff 	mov.w	r5, #4294967295
 80028d6:	e7f6      	b.n	80028c6 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <xTaskCreate+0x190>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ce      	bne.n	800287e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028e0:	6833      	ldr	r3, [r6, #0]
 80028e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028e6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80028e8:	bf98      	it	ls
 80028ea:	6034      	strls	r4, [r6, #0]
 80028ec:	e7c7      	b.n	800287e <xTaskCreate+0xf6>
 80028ee:	bf00      	nop
 80028f0:	20000d48 	.word	0x20000d48
 80028f4:	20000cb0 	.word	0x20000cb0
 80028f8:	20000d74 	.word	0x20000d74
 80028fc:	20000d94 	.word	0x20000d94
 8002900:	20000dc0 	.word	0x20000dc0
 8002904:	20000dac 	.word	0x20000dac
 8002908:	20000cb4 	.word	0x20000cb4
 800290c:	20000cb8 	.word	0x20000cb8
 8002910:	20000d58 	.word	0x20000d58
 8002914:	20000d5c 	.word	0x20000d5c
 8002918:	20000da8 	.word	0x20000da8
 800291c:	e000ed04 	.word	0xe000ed04
 8002920:	20000cbc 	.word	0x20000cbc
 8002924:	20000d60 	.word	0x20000d60

08002928 <vTaskStartScheduler>:
{
 8002928:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <vTaskStartScheduler+0x60>)
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	2400      	movs	r4, #0
 8002930:	9400      	str	r4, [sp, #0]
 8002932:	4623      	mov	r3, r4
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	4915      	ldr	r1, [pc, #84]	; (800298c <vTaskStartScheduler+0x64>)
 8002938:	4815      	ldr	r0, [pc, #84]	; (8002990 <vTaskStartScheduler+0x68>)
 800293a:	f7ff ff25 	bl	8002788 <xTaskCreate>
	if( xReturn == pdPASS )
 800293e:	2801      	cmp	r0, #1
 8002940:	d114      	bne.n	800296c <vTaskStartScheduler+0x44>
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <vTaskStartScheduler+0x6c>)
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <vTaskStartScheduler+0x70>)
 800295c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <vTaskStartScheduler+0x74>)
 8002960:	601c      	str	r4, [r3, #0]
}
 8002962:	b002      	add	sp, #8
 8002964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002968:	f7ff bade 	b.w	8001f28 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800296c:	3001      	adds	r0, #1
 800296e:	d108      	bne.n	8002982 <vTaskStartScheduler+0x5a>
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	e7fe      	b.n	8002980 <vTaskStartScheduler+0x58>
}
 8002982:	b002      	add	sp, #8
 8002984:	bd10      	pop	{r4, pc}
 8002986:	bf00      	nop
 8002988:	20000d88 	.word	0x20000d88
 800298c:	08003ef8 	.word	0x08003ef8
 8002990:	08002c0d 	.word	0x08002c0d
 8002994:	20000d8c 	.word	0x20000d8c
 8002998:	20000da8 	.word	0x20000da8
 800299c:	20000dd4 	.word	0x20000dd4

080029a0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80029a0:	4a02      	ldr	r2, [pc, #8]	; (80029ac <vTaskSuspendAll+0xc>)
 80029a2:	6813      	ldr	r3, [r2, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000d54 	.word	0x20000d54

080029b0 <xTaskIncrementTick>:
{
 80029b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029b4:	4b3c      	ldr	r3, [pc, #240]	; (8002aa8 <xTaskIncrementTick+0xf8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d153      	bne.n	8002a64 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <xTaskIncrementTick+0xfc>)
 80029be:	681c      	ldr	r4, [r3, #0]
 80029c0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80029c2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80029c4:	b9bc      	cbnz	r4, 80029f6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80029c6:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <xTaskIncrementTick+0x100>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	b142      	cbz	r2, 80029e0 <xTaskIncrementTick+0x30>
 80029ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d2:	f383 8811 	msr	BASEPRI, r3
 80029d6:	f3bf 8f6f 	isb	sy
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	e7fe      	b.n	80029de <xTaskIncrementTick+0x2e>
 80029e0:	4a34      	ldr	r2, [pc, #208]	; (8002ab4 <xTaskIncrementTick+0x104>)
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	6810      	ldr	r0, [r2, #0]
 80029e6:	6018      	str	r0, [r3, #0]
 80029e8:	6011      	str	r1, [r2, #0]
 80029ea:	4a33      	ldr	r2, [pc, #204]	; (8002ab8 <xTaskIncrementTick+0x108>)
 80029ec:	6813      	ldr	r3, [r2, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	f7ff fe67 	bl	80026c4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029f6:	4d31      	ldr	r5, [pc, #196]	; (8002abc <xTaskIncrementTick+0x10c>)
 80029f8:	4f31      	ldr	r7, [pc, #196]	; (8002ac0 <xTaskIncrementTick+0x110>)
 80029fa:	682b      	ldr	r3, [r5, #0]
 80029fc:	429c      	cmp	r4, r3
 80029fe:	f04f 0b00 	mov.w	fp, #0
 8002a02:	d33e      	bcc.n	8002a82 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a04:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002ab0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002a08:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002ad0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a0c:	f8d8 2000 	ldr.w	r2, [r8]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	bb72      	cbnz	r2, 8002a72 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a14:	f04f 32ff 	mov.w	r2, #4294967295
 8002a18:	602a      	str	r2, [r5, #0]
					break;
 8002a1a:	e032      	b.n	8002a82 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a1c:	f106 0a04 	add.w	sl, r6, #4
 8002a20:	4650      	mov	r0, sl
 8002a22:	f7ff f97e 	bl	8001d22 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a26:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002a28:	b119      	cbz	r1, 8002a32 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a2a:	f106 0018 	add.w	r0, r6, #24
 8002a2e:	f7ff f978 	bl	8001d22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a32:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002a34:	f8d9 3000 	ldr.w	r3, [r9]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	fa02 f100 	lsl.w	r1, r2, r0
 8002a3e:	4319      	orrs	r1, r3
 8002a40:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <xTaskIncrementTick+0x114>)
 8002a42:	f8c9 1000 	str.w	r1, [r9]
 8002a46:	f04f 0e14 	mov.w	lr, #20
 8002a4a:	4651      	mov	r1, sl
 8002a4c:	fb0e 3000 	mla	r0, lr, r0, r3
 8002a50:	f7ff f944 	bl	8001cdc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a54:	6838      	ldr	r0, [r7, #0]
 8002a56:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002a58:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002a5a:	4291      	cmp	r1, r2
 8002a5c:	bf28      	it	cs
 8002a5e:	f04f 0b01 	movcs.w	fp, #1
 8002a62:	e7d3      	b.n	8002a0c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002a64:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <xTaskIncrementTick+0x118>)
 8002a66:	6813      	ldr	r3, [r2, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002a6c:	f04f 0b00 	mov.w	fp, #0
 8002a70:	e011      	b.n	8002a96 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a72:	f8d8 2000 	ldr.w	r2, [r8]
 8002a76:	68d2      	ldr	r2, [r2, #12]
 8002a78:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a7a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002a7c:	428c      	cmp	r4, r1
 8002a7e:	d2cd      	bcs.n	8002a1c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002a80:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <xTaskIncrementTick+0x114>)
 8002a86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a88:	2214      	movs	r2, #20
 8002a8a:	434a      	muls	r2, r1
 8002a8c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002a8e:	2a02      	cmp	r2, #2
 8002a90:	bf28      	it	cs
 8002a92:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002a96:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <xTaskIncrementTick+0x11c>)
 8002a98:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002a9a:	2a00      	cmp	r2, #0
 8002a9c:	bf18      	it	ne
 8002a9e:	f04f 0b01 	movne.w	fp, #1
}
 8002aa2:	4658      	mov	r0, fp
 8002aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aa8:	20000d54 	.word	0x20000d54
 8002aac:	20000dd4 	.word	0x20000dd4
 8002ab0:	20000cb4 	.word	0x20000cb4
 8002ab4:	20000cb8 	.word	0x20000cb8
 8002ab8:	20000d90 	.word	0x20000d90
 8002abc:	20000d8c 	.word	0x20000d8c
 8002ac0:	20000cb0 	.word	0x20000cb0
 8002ac4:	20000cbc 	.word	0x20000cbc
 8002ac8:	20000d50 	.word	0x20000d50
 8002acc:	20000dd8 	.word	0x20000dd8
 8002ad0:	20000d5c 	.word	0x20000d5c

08002ad4 <xTaskResumeAll>:
{
 8002ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002ad8:	4c31      	ldr	r4, [pc, #196]	; (8002ba0 <xTaskResumeAll+0xcc>)
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	b943      	cbnz	r3, 8002af0 <xTaskResumeAll+0x1c>
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	e7fe      	b.n	8002aee <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002af0:	f7ff f988 	bl	8001e04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002afa:	6824      	ldr	r4, [r4, #0]
 8002afc:	b12c      	cbz	r4, 8002b0a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002afe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002b00:	f7ff f9a2 	bl	8001e48 <vPortExitCritical>
}
 8002b04:	4620      	mov	r0, r4
 8002b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <xTaskResumeAll+0xd0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f5      	beq.n	8002afe <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b12:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002bbc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002b16:	4f24      	ldr	r7, [pc, #144]	; (8002ba8 <xTaskResumeAll+0xd4>)
 8002b18:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002bc0 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b1c:	f8d9 3000 	ldr.w	r3, [r9]
 8002b20:	b9e3      	cbnz	r3, 8002b5c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002b22:	b10c      	cbz	r4, 8002b28 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002b24:	f7ff fdce 	bl	80026c4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b28:	4d20      	ldr	r5, [pc, #128]	; (8002bac <xTaskResumeAll+0xd8>)
 8002b2a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b2c:	b144      	cbz	r4, 8002b40 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002b2e:	4e20      	ldr	r6, [pc, #128]	; (8002bb0 <xTaskResumeAll+0xdc>)
 8002b30:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002b32:	f7ff ff3d 	bl	80029b0 <xTaskIncrementTick>
 8002b36:	b100      	cbz	r0, 8002b3a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002b38:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b3a:	3c01      	subs	r4, #1
 8002b3c:	d1f9      	bne.n	8002b32 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002b3e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <xTaskResumeAll+0xdc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0da      	beq.n	8002afe <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <xTaskResumeAll+0xe0>)
 8002b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002b58:	2401      	movs	r4, #1
 8002b5a:	e7d1      	b.n	8002b00 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b5c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002b60:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b62:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b64:	f104 0018 	add.w	r0, r4, #24
 8002b68:	f7ff f8db 	bl	8001d22 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	f7ff f8d8 	bl	8001d22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	2501      	movs	r5, #1
 8002b78:	fa05 f302 	lsl.w	r3, r5, r2
 8002b7c:	2014      	movs	r0, #20
 8002b7e:	430b      	orrs	r3, r1
 8002b80:	fb00 8002 	mla	r0, r0, r2, r8
 8002b84:	4631      	mov	r1, r6
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	f7ff f8a8 	bl	8001cdc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <xTaskResumeAll+0xe4>)
 8002b8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002b96:	bf24      	itt	cs
 8002b98:	4b05      	ldrcs	r3, [pc, #20]	; (8002bb0 <xTaskResumeAll+0xdc>)
 8002b9a:	601d      	strcs	r5, [r3, #0]
 8002b9c:	e7be      	b.n	8002b1c <xTaskResumeAll+0x48>
 8002b9e:	bf00      	nop
 8002ba0:	20000d54 	.word	0x20000d54
 8002ba4:	20000d48 	.word	0x20000d48
 8002ba8:	20000d5c 	.word	0x20000d5c
 8002bac:	20000d50 	.word	0x20000d50
 8002bb0:	20000dd8 	.word	0x20000dd8
 8002bb4:	e000ed04 	.word	0xe000ed04
 8002bb8:	20000cb0 	.word	0x20000cb0
 8002bbc:	20000d94 	.word	0x20000d94
 8002bc0:	20000cbc 	.word	0x20000cbc

08002bc4 <vTaskDelay>:
	{
 8002bc4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bc6:	b940      	cbnz	r0, 8002bda <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <vTaskDelay+0x40>)
 8002bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <vTaskDelay+0x44>)
 8002bdc:	6819      	ldr	r1, [r3, #0]
 8002bde:	b141      	cbz	r1, 8002bf2 <vTaskDelay+0x2e>
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	e7fe      	b.n	8002bf0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002bf2:	f7ff fed5 	bl	80029a0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002bf6:	f7ff fd77 	bl	80026e8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002bfa:	f7ff ff6b 	bl	8002ad4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	d0e2      	beq.n	8002bc8 <vTaskDelay+0x4>
 8002c02:	bd08      	pop	{r3, pc}
 8002c04:	e000ed04 	.word	0xe000ed04
 8002c08:	20000d54 	.word	0x20000d54

08002c0c <prvIdleTask>:
{
 8002c0c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002c0e:	4e17      	ldr	r6, [pc, #92]	; (8002c6c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c10:	4c17      	ldr	r4, [pc, #92]	; (8002c70 <prvIdleTask+0x64>)
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	b963      	cbnz	r3, 8002c30 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <prvIdleTask+0x68>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d9f8      	bls.n	8002c10 <prvIdleTask+0x4>
				taskYIELD();
 8002c1e:	4b16      	ldr	r3, [pc, #88]	; (8002c78 <prvIdleTask+0x6c>)
 8002c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	e7ef      	b.n	8002c10 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002c30:	f7ff feb6 	bl	80029a0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002c34:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002c36:	f7ff ff4d 	bl	8002ad4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8002c3a:	2d00      	cmp	r5, #0
 8002c3c:	d0e9      	beq.n	8002c12 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8002c3e:	f7ff f8e1 	bl	8001e04 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c42:	68f3      	ldr	r3, [r6, #12]
 8002c44:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c46:	1d28      	adds	r0, r5, #4
 8002c48:	f7ff f86b 	bl	8001d22 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002c4c:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <prvIdleTask+0x70>)
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8002c5a:	f7ff f8f5 	bl	8001e48 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002c5e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002c60:	f7ff fa8a 	bl	8002178 <vPortFree>
			vPortFree( pxTCB );
 8002c64:	4628      	mov	r0, r5
 8002c66:	f7ff fa87 	bl	8002178 <vPortFree>
 8002c6a:	e7d2      	b.n	8002c12 <prvIdleTask+0x6>
 8002c6c:	20000dc0 	.word	0x20000dc0
 8002c70:	20000d4c 	.word	0x20000d4c
 8002c74:	20000cbc 	.word	0x20000cbc
 8002c78:	e000ed04 	.word	0xe000ed04
 8002c7c:	20000d48 	.word	0x20000d48

08002c80 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <vTaskSwitchContext+0x60>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <vTaskSwitchContext+0x64>)
{
 8002c86:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c88:	b112      	cbz	r2, 8002c90 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002c8a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002c90:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <vTaskSwitchContext+0x68>)
 8002c94:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002c96:	fab3 f383 	clz	r3, r3
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	f1c3 031f 	rsb	r3, r3, #31
 8002ca0:	2214      	movs	r2, #20
 8002ca2:	4912      	ldr	r1, [pc, #72]	; (8002cec <vTaskSwitchContext+0x6c>)
 8002ca4:	435a      	muls	r2, r3
 8002ca6:	1888      	adds	r0, r1, r2
 8002ca8:	588c      	ldr	r4, [r1, r2]
 8002caa:	b944      	cbnz	r4, 8002cbe <vTaskSwitchContext+0x3e>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	e7fe      	b.n	8002cbc <vTaskSwitchContext+0x3c>
 8002cbe:	6844      	ldr	r4, [r0, #4]
 8002cc0:	3208      	adds	r2, #8
 8002cc2:	6864      	ldr	r4, [r4, #4]
 8002cc4:	6044      	str	r4, [r0, #4]
 8002cc6:	440a      	add	r2, r1
 8002cc8:	4294      	cmp	r4, r2
 8002cca:	bf04      	itt	eq
 8002ccc:	6862      	ldreq	r2, [r4, #4]
 8002cce:	6042      	streq	r2, [r0, #4]
 8002cd0:	2214      	movs	r2, #20
 8002cd2:	fb02 1303 	mla	r3, r2, r3, r1
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <vTaskSwitchContext+0x70>)
 8002cdc:	e7d6      	b.n	8002c8c <vTaskSwitchContext+0xc>
 8002cde:	bf00      	nop
 8002ce0:	20000d54 	.word	0x20000d54
 8002ce4:	20000dd8 	.word	0x20000dd8
 8002ce8:	20000d5c 	.word	0x20000d5c
 8002cec:	20000cbc 	.word	0x20000cbc
 8002cf0:	20000cb0 	.word	0x20000cb0

08002cf4 <vTaskPlaceOnEventList>:
{
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002cf8:	b940      	cbnz	r0, 8002d0c <vTaskPlaceOnEventList+0x18>
 8002cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	e7fe      	b.n	8002d0a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <vTaskPlaceOnEventList+0x30>)
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	3118      	adds	r1, #24
 8002d12:	f7fe ffef 	bl	8001cf4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d16:	4620      	mov	r0, r4
 8002d18:	2101      	movs	r1, #1
}
 8002d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d1e:	f7ff bce3 	b.w	80026e8 <prvAddCurrentTaskToDelayedList>
 8002d22:	bf00      	nop
 8002d24:	20000cb0 	.word	0x20000cb0

08002d28 <xTaskRemoveFromEventList>:
{
 8002d28:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002d2a:	68c3      	ldr	r3, [r0, #12]
 8002d2c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002d2e:	b944      	cbnz	r4, 8002d42 <xTaskRemoveFromEventList+0x1a>
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	e7fe      	b.n	8002d40 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d42:	f104 0518 	add.w	r5, r4, #24
 8002d46:	4628      	mov	r0, r5
 8002d48:	f7fe ffeb 	bl	8001d22 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <xTaskRemoveFromEventList+0x6c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	b9e3      	cbnz	r3, 8002d8c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002d52:	1d25      	adds	r5, r4, #4
 8002d54:	4628      	mov	r0, r5
 8002d56:	f7fe ffe4 	bl	8001d22 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002d5a:	490f      	ldr	r1, [pc, #60]	; (8002d98 <xTaskRemoveFromEventList+0x70>)
 8002d5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d5e:	6808      	ldr	r0, [r1, #0]
 8002d60:	2301      	movs	r3, #1
 8002d62:	4093      	lsls	r3, r2
 8002d64:	4303      	orrs	r3, r0
 8002d66:	600b      	str	r3, [r1, #0]
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <xTaskRemoveFromEventList+0x74>)
 8002d6a:	2014      	movs	r0, #20
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d72:	f7fe ffb3 	bl	8001cdc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <xTaskRemoveFromEventList+0x78>)
 8002d78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002d80:	bf83      	ittte	hi
 8002d82:	4b08      	ldrhi	r3, [pc, #32]	; (8002da4 <xTaskRemoveFromEventList+0x7c>)
 8002d84:	2001      	movhi	r0, #1
 8002d86:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8002d88:	2000      	movls	r0, #0
}
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	4806      	ldr	r0, [pc, #24]	; (8002da8 <xTaskRemoveFromEventList+0x80>)
 8002d90:	e7ef      	b.n	8002d72 <xTaskRemoveFromEventList+0x4a>
 8002d92:	bf00      	nop
 8002d94:	20000d54 	.word	0x20000d54
 8002d98:	20000d5c 	.word	0x20000d5c
 8002d9c:	20000cbc 	.word	0x20000cbc
 8002da0:	20000cb0 	.word	0x20000cb0
 8002da4:	20000dd8 	.word	0x20000dd8
 8002da8:	20000d94 	.word	0x20000d94

08002dac <vTaskSetTimeOutState>:
{
 8002dac:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8002dae:	b908      	cbnz	r0, 8002db4 <vTaskSetTimeOutState+0x8>
 8002db0:	f7ff fce0 	bl	8002774 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <vTaskSetTimeOutState+0x18>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002dba:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <vTaskSetTimeOutState+0x1c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6043      	str	r3, [r0, #4]
 8002dc0:	bd08      	pop	{r3, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000d90 	.word	0x20000d90
 8002dc8:	20000dd4 	.word	0x20000dd4

08002dcc <xTaskCheckForTimeOut>:
{
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	b940      	cbnz	r0, 8002de6 <xTaskCheckForTimeOut+0x1a>
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	e7fe      	b.n	8002de4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8002de6:	b941      	cbnz	r1, 8002dfa <xTaskCheckForTimeOut+0x2e>
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	e7fe      	b.n	8002df8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8002dfa:	f7ff f803 	bl	8001e04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <xTaskCheckForTimeOut+0x6c>)
 8002e00:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002e02:	682b      	ldr	r3, [r5, #0]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	d010      	beq.n	8002e2a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002e08:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <xTaskCheckForTimeOut+0x70>)
 8002e0a:	6820      	ldr	r0, [r4, #0]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	4290      	cmp	r0, r2
 8002e10:	6862      	ldr	r2, [r4, #4]
 8002e12:	d001      	beq.n	8002e18 <xTaskCheckForTimeOut+0x4c>
 8002e14:	4291      	cmp	r1, r2
 8002e16:	d20d      	bcs.n	8002e34 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e18:	1a88      	subs	r0, r1, r2
 8002e1a:	4283      	cmp	r3, r0
 8002e1c:	d90a      	bls.n	8002e34 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002e1e:	1a5b      	subs	r3, r3, r1
 8002e20:	4413      	add	r3, r2
 8002e22:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7ff ffc1 	bl	8002dac <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8002e2a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002e2c:	f7ff f80c 	bl	8001e48 <vPortExitCritical>
}
 8002e30:	4620      	mov	r0, r4
 8002e32:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8002e34:	2401      	movs	r4, #1
 8002e36:	e7f9      	b.n	8002e2c <xTaskCheckForTimeOut+0x60>
 8002e38:	20000dd4 	.word	0x20000dd4
 8002e3c:	20000d90 	.word	0x20000d90

08002e40 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002e40:	4b01      	ldr	r3, [pc, #4]	; (8002e48 <vTaskMissedYield+0x8>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	4770      	bx	lr
 8002e48:	20000dd8 	.word	0x20000dd8

08002e4c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <xTaskGetSchedulerState+0x18>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b133      	cbz	r3, 8002e60 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <xTaskGetSchedulerState+0x1c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e58:	bf0c      	ite	eq
 8002e5a:	2002      	moveq	r0, #2
 8002e5c:	2000      	movne	r0, #0
 8002e5e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e60:	2001      	movs	r0, #1
	}
 8002e62:	4770      	bx	lr
 8002e64:	20000da8 	.word	0x20000da8
 8002e68:	20000d54 	.word	0x20000d54

08002e6c <vTaskPriorityInherit>:
	{
 8002e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8002e70:	4604      	mov	r4, r0
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d038      	beq.n	8002ee8 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002e76:	4d1d      	ldr	r5, [pc, #116]	; (8002eec <vTaskPriorityInherit+0x80>)
 8002e78:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002e7a:	682a      	ldr	r2, [r5, #0]
 8002e7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d232      	bcs.n	8002ee8 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002e82:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002e84:	4e1a      	ldr	r6, [pc, #104]	; (8002ef0 <vTaskPriorityInherit+0x84>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002e86:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e88:	bfa1      	itttt	ge
 8002e8a:	682a      	ldrge	r2, [r5, #0]
 8002e8c:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8002e8e:	f1c2 0207 	rsbge	r2, r2, #7
 8002e92:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002e94:	2714      	movs	r7, #20
 8002e96:	6942      	ldr	r2, [r0, #20]
 8002e98:	fb07 6303 	mla	r3, r7, r3, r6
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d120      	bne.n	8002ee2 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ea0:	f100 0804 	add.w	r8, r0, #4
 8002ea4:	4640      	mov	r0, r8
 8002ea6:	f7fe ff3c 	bl	8001d22 <uxListRemove>
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <vTaskPriorityInherit+0x88>)
 8002eac:	b948      	cbnz	r0, 8002ec2 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002eae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002eb0:	4347      	muls	r7, r0
 8002eb2:	59f3      	ldr	r3, [r6, r7]
 8002eb4:	b92b      	cbnz	r3, 8002ec2 <vTaskPriorityInherit+0x56>
 8002eb6:	6813      	ldr	r3, [r2, #0]
 8002eb8:	2101      	movs	r1, #1
 8002eba:	4081      	lsls	r1, r0
 8002ebc:	ea23 0301 	bic.w	r3, r3, r1
 8002ec0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ec2:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002ec4:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ec6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002ec8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002eca:	2301      	movs	r3, #1
 8002ecc:	4083      	lsls	r3, r0
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	2314      	movs	r3, #20
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8002eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8002ede:	f7fe befd 	b.w	8001cdc <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002ee2:	682b      	ldr	r3, [r5, #0]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eec:	20000cb0 	.word	0x20000cb0
 8002ef0:	20000cbc 	.word	0x20000cbc
 8002ef4:	20000d5c 	.word	0x20000d5c

08002ef8 <xTaskPriorityDisinherit>:
	{
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8002efa:	4604      	mov	r4, r0
 8002efc:	b908      	cbnz	r0, 8002f02 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002efe:	2000      	movs	r0, #0
 8002f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002f02:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <xTaskPriorityDisinherit+0x94>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4298      	cmp	r0, r3
 8002f08:	d008      	beq.n	8002f1c <xTaskPriorityDisinherit+0x24>
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	e7fe      	b.n	8002f1a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002f1c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002f1e:	b943      	cbnz	r3, 8002f32 <xTaskPriorityDisinherit+0x3a>
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	e7fe      	b.n	8002f30 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f32:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002f34:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8002f36:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f38:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8002f3a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002f3c:	d0df      	beq.n	8002efe <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1dd      	bne.n	8002efe <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f42:	1d05      	adds	r5, r0, #4
 8002f44:	4628      	mov	r0, r5
 8002f46:	f7fe feec 	bl	8001d22 <uxListRemove>
 8002f4a:	4e11      	ldr	r6, [pc, #68]	; (8002f90 <xTaskPriorityDisinherit+0x98>)
 8002f4c:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <xTaskPriorityDisinherit+0x9c>)
 8002f4e:	b950      	cbnz	r0, 8002f66 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002f52:	2114      	movs	r1, #20
 8002f54:	4379      	muls	r1, r7
 8002f56:	5873      	ldr	r3, [r6, r1]
 8002f58:	b92b      	cbnz	r3, 8002f66 <xTaskPriorityDisinherit+0x6e>
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	40b8      	lsls	r0, r7
 8002f60:	ea23 0300 	bic.w	r3, r3, r0
 8002f64:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002f66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f68:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f6a:	f1c3 0107 	rsb	r1, r3, #7
 8002f6e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002f70:	6811      	ldr	r1, [r2, #0]
 8002f72:	2401      	movs	r4, #1
 8002f74:	fa04 f003 	lsl.w	r0, r4, r3
 8002f78:	4308      	orrs	r0, r1
 8002f7a:	6010      	str	r0, [r2, #0]
 8002f7c:	2014      	movs	r0, #20
 8002f7e:	fb00 6003 	mla	r0, r0, r3, r6
 8002f82:	4629      	mov	r1, r5
 8002f84:	f7fe feaa 	bl	8001cdc <vListInsertEnd>
					xReturn = pdTRUE;
 8002f88:	4620      	mov	r0, r4
	}
 8002f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f8c:	20000cb0 	.word	0x20000cb0
 8002f90:	20000cbc 	.word	0x20000cbc
 8002f94:	20000d5c 	.word	0x20000d5c

08002f98 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <pvTaskIncrementMutexHeldCount+0x14>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	b11a      	cbz	r2, 8002fa6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002fa2:	3201      	adds	r2, #1
 8002fa4:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8002fa6:	6818      	ldr	r0, [r3, #0]
	}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000cb0 	.word	0x20000cb0

08002fb0 <Task_ultrasonic>:
  unsigned int IntVar;
  unsigned char Bytes[4];
}Range;

void Task_ultrasonic(void const * argument)
{
 8002fb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Task_ultrasonic */
  /* Infinite loop */
  for(;;)
  {
	//semaphore get
	xSemaphoreTake(myMutex01Handle,portMAX_DELAY);
 8002fb2:	4c0e      	ldr	r4, [pc, #56]	; (8002fec <Task_ultrasonic+0x3c>)
	State_measure = Ready;
 8002fb4:	4d0e      	ldr	r5, [pc, #56]	; (8002ff0 <Task_ultrasonic+0x40>)
	xSemaphoreTake(myMutex01Handle,portMAX_DELAY);
 8002fb6:	6820      	ldr	r0, [r4, #0]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	f7ff fabc 	bl	800253c <xQueueGenericReceive>
	State_measure = Ready;
 8002fc4:	2301      	movs	r3, #1
	HAL_TIM_Base_Start_IT(&htim15);
 8002fc6:	480b      	ldr	r0, [pc, #44]	; (8002ff4 <Task_ultrasonic+0x44>)
	State_measure = Ready;
 8002fc8:	702b      	strb	r3, [r5, #0]
	HAL_TIM_Base_Start_IT(&htim15);
 8002fca:	f7fe fa4b 	bl	8001464 <HAL_TIM_Base_Start_IT>
	xSemaphoreGive(myMutex01Handle);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	6820      	ldr	r0, [r4, #0]
 8002fd6:	f7ff f9e9 	bl	80023ac <xQueueGenericSend>
	//semaphore free
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //heartbeat
 8002fda:	2120      	movs	r1, #32
 8002fdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe0:	f7fd fe9b 	bl	8000d1a <HAL_GPIO_TogglePin>
    osDelay(30);
 8002fe4:	201e      	movs	r0, #30
 8002fe6:	f7fe fe60 	bl	8001caa <osDelay>
 8002fea:	e7e4      	b.n	8002fb6 <Task_ultrasonic+0x6>
 8002fec:	20000e04 	.word	0x20000e04
 8002ff0:	20000008 	.word	0x20000008
 8002ff4:	20000e48 	.word	0x20000e48

08002ff8 <Task_Serial>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Serial */
void Task_Serial(void const * argument)
{
 8002ff8:	b570      	push	{r4, r5, r6, lr}
  int len = 0;

  for(;;)
  {
	//semaphore get
	xSemaphoreTake(myMutex01Handle,portMAX_DELAY);
 8002ffa:	4c13      	ldr	r4, [pc, #76]	; (8003048 <Task_Serial+0x50>)
	Range.IntVar = Medicion_d;
 8002ffc:	4d13      	ldr	r5, [pc, #76]	; (800304c <Task_Serial+0x54>)
{
 8002ffe:	b09c      	sub	sp, #112	; 0x70
	xSemaphoreTake(myMutex01Handle,portMAX_DELAY);
 8003000:	2300      	movs	r3, #0
 8003002:	4619      	mov	r1, r3
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	6820      	ldr	r0, [r4, #0]
 800300a:	f7ff fa97 	bl	800253c <xQueueGenericReceive>
	Range.IntVar = Medicion_d;
 800300e:	4910      	ldr	r1, [pc, #64]	; (8003050 <Task_Serial+0x58>)
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	600b      	str	r3, [r1, #0]
	len = sprintf(str,"Range (cm) = %d , %d , %d\n",Medicion_d,Range.Bytes[0],Range.Bytes[1]);//variable compartida
 8003014:	780b      	ldrb	r3, [r1, #0]
 8003016:	7849      	ldrb	r1, [r1, #1]
 8003018:	682a      	ldr	r2, [r5, #0]
 800301a:	9100      	str	r1, [sp, #0]
 800301c:	a803      	add	r0, sp, #12
 800301e:	490d      	ldr	r1, [pc, #52]	; (8003054 <Task_Serial+0x5c>)
 8003020:	f000 fb18 	bl	8003654 <siprintf>
	//semaphore free
	xSemaphoreGive(myMutex01Handle);
 8003024:	2300      	movs	r3, #0
	len = sprintf(str,"Range (cm) = %d , %d , %d\n",Medicion_d,Range.Bytes[0],Range.Bytes[1]);//variable compartida
 8003026:	4606      	mov	r6, r0
	xSemaphoreGive(myMutex01Handle);
 8003028:	461a      	mov	r2, r3
 800302a:	4619      	mov	r1, r3
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	f7ff f9bd 	bl	80023ac <xQueueGenericSend>
	HAL_UART_Transmit(&huart2,str,len , 15);
 8003032:	230f      	movs	r3, #15
 8003034:	b2b2      	uxth	r2, r6
 8003036:	a903      	add	r1, sp, #12
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <Task_Serial+0x60>)
 800303a:	f7fe fd5c 	bl	8001af6 <HAL_UART_Transmit>

    osDelay(200);
 800303e:	20c8      	movs	r0, #200	; 0xc8
 8003040:	f7fe fe33 	bl	8001caa <osDelay>
 8003044:	e7dc      	b.n	8003000 <Task_Serial+0x8>
 8003046:	bf00      	nop
 8003048:	20000e04 	.word	0x20000e04
 800304c:	20000de0 	.word	0x20000de0
 8003050:	20000e00 	.word	0x20000e00
 8003054:	08003efd 	.word	0x08003efd
 8003058:	20000e88 	.word	0x20000e88

0800305c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 800305c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800305e:	b08d      	sub	sp, #52	; 0x34
  osMutexDef(myMutex01);
 8003060:	a80c      	add	r0, sp, #48	; 0x30
 8003062:	2700      	movs	r7, #0
 8003064:	f840 7d2c 	str.w	r7, [r0, #-44]!
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003068:	f7fe fe27 	bl	8001cba <osMutexCreate>
  osThreadDef(TaskUltrasonic, Task_ultrasonic, osPriorityNormal, 0, 128);
 800306c:	4c0e      	ldr	r4, [pc, #56]	; (80030a8 <MX_FREERTOS_Init+0x4c>)
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <MX_FREERTOS_Init+0x50>)
  osThreadDef(TaskUltrasonic, Task_ultrasonic, osPriorityNormal, 0, 128);
 8003070:	4626      	mov	r6, r4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003072:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskUltrasonic, Task_ultrasonic, osPriorityNormal, 0, 128);
 8003074:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003076:	ad02      	add	r5, sp, #8
 8003078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800307a:	6833      	ldr	r3, [r6, #0]
 800307c:	602b      	str	r3, [r5, #0]
  TaskUltrasonicHandle = osThreadCreate(osThread(TaskUltrasonic), NULL);
 800307e:	4639      	mov	r1, r7
 8003080:	a802      	add	r0, sp, #8
 8003082:	f7fe fdfa 	bl	8001c7a <osThreadCreate>
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <MX_FREERTOS_Init+0x54>)
  osThreadDef(TaskSerial, Task_Serial, osPriorityIdle, 0, 128);
 8003088:	3414      	adds	r4, #20
  TaskUltrasonicHandle = osThreadCreate(osThread(TaskUltrasonic), NULL);
 800308a:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskSerial, Task_Serial, osPriorityIdle, 0, 128);
 800308c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800308e:	ad07      	add	r5, sp, #28
 8003090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	602b      	str	r3, [r5, #0]
  TaskSerialHandle = osThreadCreate(osThread(TaskSerial), NULL);
 8003096:	4639      	mov	r1, r7
 8003098:	a807      	add	r0, sp, #28
 800309a:	f7fe fdee 	bl	8001c7a <osThreadCreate>
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <MX_FREERTOS_Init+0x58>)
 80030a0:	6018      	str	r0, [r3, #0]
}
 80030a2:	b00d      	add	sp, #52	; 0x34
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a6:	bf00      	nop
 80030a8:	08003eac 	.word	0x08003eac
 80030ac:	20000e04 	.word	0x20000e04
 80030b0:	20000dfc 	.word	0x20000dfc
 80030b4:	20000df8 	.word	0x20000df8

080030b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80030b8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ba:	2214      	movs	r2, #20
{
 80030bc:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030be:	eb0d 0002 	add.w	r0, sp, r2
 80030c2:	2100      	movs	r1, #0
 80030c4:	f000 fabd 	bl	8003642 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c8:	4b2c      	ldr	r3, [pc, #176]	; (800317c <MX_GPIO_Init+0xc4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80030ca:	4d2d      	ldr	r5, [pc, #180]	; (8003180 <MX_GPIO_Init+0xc8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80030d2:	615a      	str	r2, [r3, #20]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80030da:	9201      	str	r2, [sp, #4]
 80030dc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80030e4:	615a      	str	r2, [r3, #20]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80030ec:	9202      	str	r2, [sp, #8]
 80030ee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80030f6:	615a      	str	r2, [r3, #20]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80030fe:	9203      	str	r2, [sp, #12]
 8003100:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003108:	615a      	str	r2, [r3, #20]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003110:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003112:	4628      	mov	r0, r5
 8003114:	2200      	movs	r2, #0
 8003116:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003118:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800311a:	f7fd fdf9 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800311e:	2200      	movs	r2, #0
 8003120:	2120      	movs	r1, #32
 8003122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003126:	f7fd fdf3 	bl	8000d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800312a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8003130:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003132:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <MX_GPIO_Init+0xcc>)
 8003136:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003138:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800313c:	f7fd fd28 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003140:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003142:	a905      	add	r1, sp, #20
 8003144:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003146:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003148:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800314a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314e:	f7fd fd1f 	bl	8000b90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003152:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003154:	a905      	add	r1, sp, #20
 8003156:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003158:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003160:	f7fd fd16 	bl	8000b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003164:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003166:	a905      	add	r1, sp, #20
 8003168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 800316c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003172:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003174:	f7fd fd0c 	bl	8000b90 <HAL_GPIO_Init>

}
 8003178:	b00a      	add	sp, #40	; 0x28
 800317a:	bd70      	pop	{r4, r5, r6, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	48000800 	.word	0x48000800
 8003184:	10210000 	.word	0x10210000

08003188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003188:	b510      	push	{r4, lr}
 800318a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800318c:	2228      	movs	r2, #40	; 0x28
 800318e:	2100      	movs	r1, #0
 8003190:	a806      	add	r0, sp, #24
 8003192:	f000 fa56 	bl	8003642 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003196:	2214      	movs	r2, #20
 8003198:	2100      	movs	r1, #0
 800319a:	a801      	add	r0, sp, #4
 800319c:	f000 fa51 	bl	8003642 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031a0:	2301      	movs	r3, #1
 80031a2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031a4:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031a6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031a8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031aa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80031ac:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80031b0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031b2:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031b4:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b6:	f7fd fdb5 	bl	8000d24 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031ba:	230f      	movs	r3, #15
 80031bc:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031be:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031c2:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031c4:	4621      	mov	r1, r4
 80031c6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031c8:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031ca:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031cc:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031ce:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031d0:	f7fe f850 	bl	8001274 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80031d4:	b010      	add	sp, #64	; 0x40
 80031d6:	bd10      	pop	{r4, pc}

080031d8 <main>:
{
 80031d8:	b508      	push	{r3, lr}
  HAL_Init();
 80031da:	f7fd fc63 	bl	8000aa4 <HAL_Init>
  SystemClock_Config();
 80031de:	f7ff ffd3 	bl	8003188 <SystemClock_Config>
  MX_GPIO_Init();
 80031e2:	f7ff ff69 	bl	80030b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80031e6:	f000 f983 	bl	80034f0 <MX_USART2_UART_Init>
  MX_TIM15_Init();
 80031ea:	f000 f92b 	bl	8003444 <MX_TIM15_Init>
  MX_FREERTOS_Init();
 80031ee:	f7ff ff35 	bl	800305c <MX_FREERTOS_Init>
  osKernelStart();
 80031f2:	f7fe fd3d 	bl	8001c70 <osKernelStart>
 80031f6:	e7fe      	b.n	80031f6 <main+0x1e>

080031f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80031f8:	6802      	ldr	r2, [r0, #0]
 80031fa:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d101      	bne.n	8003204 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003200:	f7fd bc62 	b.w	8000ac8 <HAL_IncTick>
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40000400 	.word	0x40000400

0800320c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800320c:	4770      	bx	lr
	...

08003210 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_MspInit+0x3c>)
{
 8003212:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	619a      	str	r2, [r3, #24]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	f002 0201 	and.w	r2, r2, #1
 8003222:	9200      	str	r2, [sp, #0]
 8003224:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	69da      	ldr	r2, [r3, #28]
 8003228:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800322c:	61da      	str	r2, [r3, #28]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003236:	2200      	movs	r2, #0
 8003238:	210f      	movs	r1, #15
 800323a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003240:	f7fd fc66 	bl	8000b10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003244:	b003      	add	sp, #12
 8003246:	f85d fb04 	ldr.w	pc, [sp], #4
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000

08003250 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003250:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8003252:	4601      	mov	r1, r0
{
 8003254:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8003256:	2200      	movs	r2, #0
 8003258:	201d      	movs	r0, #29
 800325a:	f7fd fc59 	bl	8000b10 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 800325e:	201d      	movs	r0, #29
 8003260:	f7fd fc8a 	bl	8000b78 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003266:	4c15      	ldr	r4, [pc, #84]	; (80032bc <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	f042 0202 	orr.w	r2, r2, #2
 800326e:	61da      	str	r2, [r3, #28]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003278:	a901      	add	r1, sp, #4
 800327a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 800327c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800327e:	f7fe f8d3 	bl	8001428 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003282:	f7fe f8a1 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_InitTick+0x70>)
 8003288:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800328a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800328e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003290:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <HAL_InitTick+0x74>)
 8003294:	fbb0 f0f3 	udiv	r0, r0, r3
 8003298:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 800329a:	2300      	movs	r3, #0
  htim3.Init.Prescaler = uwPrescalerValue;
 800329c:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 800329e:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 80032a0:	6123      	str	r3, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032a2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80032a4:	f7fe f9fc 	bl	80016a0 <HAL_TIM_Base_Init>
 80032a8:	b920      	cbnz	r0, 80032b4 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7fe f8da 	bl	8001464 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80032b0:	b008      	add	sp, #32
 80032b2:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80032b4:	2001      	movs	r0, #1
 80032b6:	e7fb      	b.n	80032b0 <HAL_InitTick+0x60>
 80032b8:	40021000 	.word	0x40021000
 80032bc:	20000e08 	.word	0x20000e08
 80032c0:	40000400 	.word	0x40000400
 80032c4:	000f4240 	.word	0x000f4240

080032c8 <NMI_Handler>:
 80032c8:	4770      	bx	lr

080032ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ca:	e7fe      	b.n	80032ca <HardFault_Handler>

080032cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032cc:	e7fe      	b.n	80032cc <MemManage_Handler>

080032ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ce:	e7fe      	b.n	80032ce <BusFault_Handler>

080032d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032d0:	e7fe      	b.n	80032d0 <UsageFault_Handler>

080032d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d2:	4770      	bx	lr
 80032d4:	0000      	movs	r0, r0
	...

080032d8 <TIM1_BRK_TIM15_IRQHandler>:
state State_measure = Ready;
volatile int count = 0,Medicion_d = 0;
volatile float Medicion = 0.0;

void TIM1_BRK_TIM15_IRQHandler(void)
{
 80032d8:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	switch(State_measure)
 80032da:	4c37      	ldr	r4, [pc, #220]	; (80033b8 <TIM1_BRK_TIM15_IRQHandler+0xe0>)
 80032dc:	7823      	ldrb	r3, [r4, #0]
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d80b      	bhi.n	80032fa <TIM1_BRK_TIM15_IRQHandler+0x22>
 80032e2:	e8df f003 	tbb	[pc, r3]
 80032e6:	032d      	.short	0x032d
 80032e8:	610f      	.short	0x610f
 80032ea:	16          	.byte	0x16
 80032eb:	00          	.byte	0x00
	  {
	  	  case Ready:
	  		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80032ec:	2201      	movs	r2, #1
 80032ee:	2108      	movs	r1, #8
 80032f0:	4832      	ldr	r0, [pc, #200]	; (80033bc <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 80032f2:	f7fd fd0d 	bl	8000d10 <HAL_GPIO_WritePin>
	  		  State_measure = Triggering;
 80032f6:	2302      	movs	r3, #2
	  			  count++;
	  			  if(count > Max_echo_delay)
	  			  {
	  				  HAL_TIM_Base_Stop_IT(&htim15);
	  				  count = 0;
	  				  State_measure = Fault;
 80032f8:	7023      	strb	r3, [r4, #0]

	  	  default:
	  	  break;
	  }
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80032fa:	4831      	ldr	r0, [pc, #196]	; (80033c0 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80032fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_TIM_IRQHandler(&htim15);
 8003300:	f7fe b8d4 	b.w	80014ac <HAL_TIM_IRQHandler>
	  		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8003304:	2200      	movs	r2, #0
 8003306:	2108      	movs	r1, #8
 8003308:	482c      	ldr	r0, [pc, #176]	; (80033bc <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 800330a:	f7fd fd01 	bl	8000d10 <HAL_GPIO_WritePin>
	  		  State_measure = Waiting;
 800330e:	2304      	movs	r3, #4
 8003310:	e7f2      	b.n	80032f8 <TIM1_BRK_TIM15_IRQHandler+0x20>
	  		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)== 0)
 8003312:	2104      	movs	r1, #4
 8003314:	4829      	ldr	r0, [pc, #164]	; (80033bc <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8003316:	4d2b      	ldr	r5, [pc, #172]	; (80033c4 <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8003318:	f7fd fcf4 	bl	8000d04 <HAL_GPIO_ReadPin>
 800331c:	4606      	mov	r6, r0
 800331e:	b960      	cbnz	r0, 800333a <TIM1_BRK_TIM15_IRQHandler+0x62>
	  			  count++;
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	3301      	adds	r3, #1
 8003324:	602b      	str	r3, [r5, #0]
	  			  if(count > Max_echo_delay)
 8003326:	682b      	ldr	r3, [r5, #0]
 8003328:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800332c:	dde5      	ble.n	80032fa <TIM1_BRK_TIM15_IRQHandler+0x22>
	  				  HAL_TIM_Base_Stop_IT(&htim15);
 800332e:	4824      	ldr	r0, [pc, #144]	; (80033c0 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 8003330:	f7fe f8a3 	bl	800147a <HAL_TIM_Base_Stop_IT>
	  				  count = 0;
 8003334:	602e      	str	r6, [r5, #0]
	  				  State_measure = Fault;
 8003336:	2303      	movs	r3, #3
 8003338:	e7de      	b.n	80032f8 <TIM1_BRK_TIM15_IRQHandler+0x20>
	  			  count = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	602b      	str	r3, [r5, #0]
 800333e:	e7db      	b.n	80032f8 <TIM1_BRK_TIM15_IRQHandler+0x20>
	  		  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_2)== 1)
 8003340:	2104      	movs	r1, #4
 8003342:	481e      	ldr	r0, [pc, #120]	; (80033bc <TIM1_BRK_TIM15_IRQHandler+0xe4>)
 8003344:	4d1f      	ldr	r5, [pc, #124]	; (80033c4 <TIM1_BRK_TIM15_IRQHandler+0xec>)
 8003346:	f7fd fcdd 	bl	8000d04 <HAL_GPIO_ReadPin>
 800334a:	2801      	cmp	r0, #1
 800334c:	d10c      	bne.n	8003368 <TIM1_BRK_TIM15_IRQHandler+0x90>
	  			  count ++;
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	602b      	str	r3, [r5, #0]
	  			  if(count > Max_range_cnt)
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800335a:	ddce      	ble.n	80032fa <TIM1_BRK_TIM15_IRQHandler+0x22>
	  				  HAL_TIM_Base_Stop_IT(&htim15);
 800335c:	4818      	ldr	r0, [pc, #96]	; (80033c0 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 800335e:	f7fe f88c 	bl	800147a <HAL_TIM_Base_Stop_IT>
	  				  count = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	602b      	str	r3, [r5, #0]
 8003366:	e7e6      	b.n	8003336 <TIM1_BRK_TIM15_IRQHandler+0x5e>
	  			  HAL_TIM_Base_Stop_IT(&htim15);
 8003368:	4815      	ldr	r0, [pc, #84]	; (80033c0 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 800336a:	f7fe f886 	bl	800147a <HAL_TIM_Base_Stop_IT>
	  			  Medicion = (float)count*0.2850;//me da nauseas esto
 800336e:	6828      	ldr	r0, [r5, #0]
 8003370:	ee07 0a90 	vmov	s15, r0
 8003374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003378:	ee17 0a90 	vmov	r0, s15
 800337c:	f7fd f8dc 	bl	8000538 <__aeabi_f2d>
 8003380:	a30b      	add	r3, pc, #44	; (adr r3, 80033b0 <TIM1_BRK_TIM15_IRQHandler+0xd8>)
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f7fd f92b 	bl	80005e0 <__aeabi_dmul>
 800338a:	f7fd fb3b 	bl	8000a04 <__aeabi_d2f>
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <TIM1_BRK_TIM15_IRQHandler+0xf0>)
 8003390:	6018      	str	r0, [r3, #0]
	  			  Medicion_d = (int)Medicion;
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <TIM1_BRK_TIM15_IRQHandler+0xf4>)
 8003398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800339c:	edc3 7a00 	vstr	s15, [r3]
	  			  count = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	602b      	str	r3, [r5, #0]
	  			  State_measure = Ready;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e7a7      	b.n	80032f8 <TIM1_BRK_TIM15_IRQHandler+0x20>
	  		  HAL_TIM_Base_Stop_IT(&htim15);
 80033a8:	4805      	ldr	r0, [pc, #20]	; (80033c0 <TIM1_BRK_TIM15_IRQHandler+0xe8>)
 80033aa:	f7fe f866 	bl	800147a <HAL_TIM_Base_Stop_IT>
	  	  break;
 80033ae:	e7a4      	b.n	80032fa <TIM1_BRK_TIM15_IRQHandler+0x22>
 80033b0:	a3d70a3d 	.word	0xa3d70a3d
 80033b4:	3fd23d70 	.word	0x3fd23d70
 80033b8:	20000008 	.word	0x20000008
 80033bc:	48000800 	.word	0x48000800
 80033c0:	20000e48 	.word	0x20000e48
 80033c4:	20000de4 	.word	0x20000de4
 80033c8:	20000ddc 	.word	0x20000ddc
 80033cc:	20000de0 	.word	0x20000de0

080033d0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033d0:	4801      	ldr	r0, [pc, #4]	; (80033d8 <TIM3_IRQHandler+0x8>)
 80033d2:	f7fe b86b 	b.w	80014ac <HAL_TIM_IRQHandler>
 80033d6:	bf00      	nop
 80033d8:	20000e08 	.word	0x20000e08

080033dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033dc:	4915      	ldr	r1, [pc, #84]	; (8003434 <SystemInit+0x58>)
 80033de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80033e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80033ea:	4b13      	ldr	r3, [pc, #76]	; (8003438 <SystemInit+0x5c>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80033f4:	6858      	ldr	r0, [r3, #4]
 80033f6:	4a11      	ldr	r2, [pc, #68]	; (800343c <SystemInit+0x60>)
 80033f8:	4002      	ands	r2, r0
 80033fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003402:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003406:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800340e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003416:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	f022 020f 	bic.w	r2, r2, #15
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003420:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003422:	4a07      	ldr	r2, [pc, #28]	; (8003440 <SystemInit+0x64>)
 8003424:	4002      	ands	r2, r0
 8003426:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800342c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003430:	608b      	str	r3, [r1, #8]
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00
 8003438:	40021000 	.word	0x40021000
 800343c:	f87fc00c 	.word	0xf87fc00c
 8003440:	ff00fccc 	.word	0xff00fccc

08003444 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003444:	b500      	push	{lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003446:	2210      	movs	r2, #16
{
 8003448:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800344a:	2100      	movs	r1, #0
 800344c:	eb0d 0002 	add.w	r0, sp, r2
 8003450:	f000 f8f7 	bl	8003642 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim15.Instance = TIM15;
 8003454:	4815      	ldr	r0, [pc, #84]	; (80034ac <MX_TIM15_Init+0x68>)
  htim15.Init.Prescaler = 319;
 8003456:	4916      	ldr	r1, [pc, #88]	; (80034b0 <MX_TIM15_Init+0x6c>)
 8003458:	f240 123f 	movw	r2, #319	; 0x13f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800345c:	2300      	movs	r3, #0
  htim15.Init.Prescaler = 319;
 800345e:	e880 0006 	stmia.w	r0, {r1, r2}
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim15.Init.Period = 2;
 8003462:	2202      	movs	r2, #2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	9302      	str	r3, [sp, #8]
 8003468:	9303      	str	r3, [sp, #12]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346a:	6083      	str	r3, [r0, #8]
  htim15.Init.Period = 2;
 800346c:	60c2      	str	r2, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800346e:	6103      	str	r3, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8003470:	6143      	str	r3, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003472:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003474:	f7fe f914 	bl	80016a0 <HAL_TIM_Base_Init>
 8003478:	b108      	cbz	r0, 800347e <MX_TIM15_Init+0x3a>
  {
    Error_Handler();
 800347a:	f7ff fec7 	bl	800320c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800347e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003482:	a904      	add	r1, sp, #16
 8003484:	4809      	ldr	r0, [pc, #36]	; (80034ac <MX_TIM15_Init+0x68>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003486:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003488:	f7fe f92e 	bl	80016e8 <HAL_TIM_ConfigClockSource>
 800348c:	b108      	cbz	r0, 8003492 <MX_TIM15_Init+0x4e>
  {
    Error_Handler();
 800348e:	f7ff febd 	bl	800320c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003492:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003494:	a901      	add	r1, sp, #4
 8003496:	4805      	ldr	r0, [pc, #20]	; (80034ac <MX_TIM15_Init+0x68>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003498:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800349a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800349c:	f7fe f9da 	bl	8001854 <HAL_TIMEx_MasterConfigSynchronization>
 80034a0:	b108      	cbz	r0, 80034a6 <MX_TIM15_Init+0x62>
  {
    Error_Handler();
 80034a2:	f7ff feb3 	bl	800320c <Error_Handler>
  }

}
 80034a6:	b009      	add	sp, #36	; 0x24
 80034a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80034ac:	20000e48 	.word	0x20000e48
 80034b0:	40014000 	.word	0x40014000

080034b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034b4:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM15)
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_TIM_Base_MspInit+0x38>)
 80034b8:	6802      	ldr	r2, [r0, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d112      	bne.n	80034e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80034be:	f503 4350 	add.w	r3, r3, #53248	; 0xd000

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80034c2:	2018      	movs	r0, #24
    __HAL_RCC_TIM15_CLK_ENABLE();
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034ca:	619a      	str	r2, [r3, #24]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2105      	movs	r1, #5
    __HAL_RCC_TIM15_CLK_ENABLE();
 80034d8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80034da:	f7fd fb19 	bl	8000b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80034de:	2018      	movs	r0, #24
 80034e0:	f7fd fb4a 	bl	8000b78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80034e4:	b003      	add	sp, #12
 80034e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80034ea:	bf00      	nop
 80034ec:	40014000 	.word	0x40014000

080034f0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80034f0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80034f2:	480c      	ldr	r0, [pc, #48]	; (8003524 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 38400;
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <MX_USART2_UART_Init+0x38>)
 80034f6:	f44f 4e16 	mov.w	lr, #38400	; 0x9600
 80034fa:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034fe:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003500:	2300      	movs	r3, #0
 8003502:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003504:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003506:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003508:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800350a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800350c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800350e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003510:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003512:	f7fe fb7b 	bl	8001c0c <HAL_UART_Init>
 8003516:	b118      	cbz	r0, 8003520 <MX_USART2_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 8003518:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800351c:	f7ff be76 	b.w	800320c <Error_Handler>
 8003520:	bd08      	pop	{r3, pc}
 8003522:	bf00      	nop
 8003524:	20000e88 	.word	0x20000e88
 8003528:	40004400 	.word	0x40004400

0800352c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800352c:	b510      	push	{r4, lr}
 800352e:	4604      	mov	r4, r0
 8003530:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003532:	2214      	movs	r2, #20
 8003534:	2100      	movs	r1, #0
 8003536:	a803      	add	r0, sp, #12
 8003538:	f000 f883 	bl	8003642 <memset>
  if(uartHandle->Instance==USART2)
 800353c:	6822      	ldr	r2, [r4, #0]
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_UART_MspInit+0x60>)
 8003540:	429a      	cmp	r2, r3
 8003542:	d120      	bne.n	8003586 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003544:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003548:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003550:	61da      	str	r2, [r3, #28]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003558:	9201      	str	r2, [sp, #4]
 800355a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003562:	615a      	str	r2, [r3, #20]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	9302      	str	r3, [sp, #8]
 800356c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800356e:	230c      	movs	r3, #12
 8003570:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003576:	2303      	movs	r3, #3
 8003578:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800357e:	2307      	movs	r3, #7
 8003580:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003582:	f7fd fb05 	bl	8000b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003586:	b008      	add	sp, #32
 8003588:	bd10      	pop	{r4, pc}
 800358a:	bf00      	nop
 800358c:	40004400 	.word	0x40004400

08003590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003594:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003596:	e003      	b.n	80035a0 <LoopCopyDataInit>

08003598 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800359a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800359c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800359e:	3104      	adds	r1, #4

080035a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035a0:	480b      	ldr	r0, [pc, #44]	; (80035d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80035a2:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80035a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035a8:	d3f6      	bcc.n	8003598 <CopyDataInit>
	ldr	r2, =_sbss
 80035aa:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80035ac:	e002      	b.n	80035b4 <LoopFillZerobss>

080035ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035b0:	f842 3b04 	str.w	r3, [r2], #4

080035b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <LoopForever+0x16>)
	cmp	r2, r3
 80035b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80035b8:	d3f9      	bcc.n	80035ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035ba:	f7ff ff0f 	bl	80033dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035be:	f000 f811 	bl	80035e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035c2:	f7ff fe09 	bl	80031d8 <main>

080035c6 <LoopForever>:

LoopForever:
    b LoopForever
 80035c6:	e7fe      	b.n	80035c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035c8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80035cc:	08003f88 	.word	0x08003f88
	ldr	r0, =_sdata
 80035d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80035d4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80035d8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80035dc:	20000efc 	.word	0x20000efc

080035e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035e0:	e7fe      	b.n	80035e0 <ADC1_2_IRQHandler>
	...

080035e4 <__libc_init_array>:
 80035e4:	b570      	push	{r4, r5, r6, lr}
 80035e6:	4e0d      	ldr	r6, [pc, #52]	; (800361c <__libc_init_array+0x38>)
 80035e8:	4c0d      	ldr	r4, [pc, #52]	; (8003620 <__libc_init_array+0x3c>)
 80035ea:	1ba4      	subs	r4, r4, r6
 80035ec:	10a4      	asrs	r4, r4, #2
 80035ee:	2500      	movs	r5, #0
 80035f0:	42a5      	cmp	r5, r4
 80035f2:	d109      	bne.n	8003608 <__libc_init_array+0x24>
 80035f4:	4e0b      	ldr	r6, [pc, #44]	; (8003624 <__libc_init_array+0x40>)
 80035f6:	4c0c      	ldr	r4, [pc, #48]	; (8003628 <__libc_init_array+0x44>)
 80035f8:	f000 fc4c 	bl	8003e94 <_init>
 80035fc:	1ba4      	subs	r4, r4, r6
 80035fe:	10a4      	asrs	r4, r4, #2
 8003600:	2500      	movs	r5, #0
 8003602:	42a5      	cmp	r5, r4
 8003604:	d105      	bne.n	8003612 <__libc_init_array+0x2e>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800360c:	4798      	blx	r3
 800360e:	3501      	adds	r5, #1
 8003610:	e7ee      	b.n	80035f0 <__libc_init_array+0xc>
 8003612:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003616:	4798      	blx	r3
 8003618:	3501      	adds	r5, #1
 800361a:	e7f2      	b.n	8003602 <__libc_init_array+0x1e>
 800361c:	08003f80 	.word	0x08003f80
 8003620:	08003f80 	.word	0x08003f80
 8003624:	08003f80 	.word	0x08003f80
 8003628:	08003f84 	.word	0x08003f84

0800362c <memcpy>:
 800362c:	b510      	push	{r4, lr}
 800362e:	1e43      	subs	r3, r0, #1
 8003630:	440a      	add	r2, r1
 8003632:	4291      	cmp	r1, r2
 8003634:	d100      	bne.n	8003638 <memcpy+0xc>
 8003636:	bd10      	pop	{r4, pc}
 8003638:	f811 4b01 	ldrb.w	r4, [r1], #1
 800363c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003640:	e7f7      	b.n	8003632 <memcpy+0x6>

08003642 <memset>:
 8003642:	4402      	add	r2, r0
 8003644:	4603      	mov	r3, r0
 8003646:	4293      	cmp	r3, r2
 8003648:	d100      	bne.n	800364c <memset+0xa>
 800364a:	4770      	bx	lr
 800364c:	f803 1b01 	strb.w	r1, [r3], #1
 8003650:	e7f9      	b.n	8003646 <memset+0x4>
	...

08003654 <siprintf>:
 8003654:	b40e      	push	{r1, r2, r3}
 8003656:	b500      	push	{lr}
 8003658:	b09c      	sub	sp, #112	; 0x70
 800365a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800365e:	ab1d      	add	r3, sp, #116	; 0x74
 8003660:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003664:	9002      	str	r0, [sp, #8]
 8003666:	9006      	str	r0, [sp, #24]
 8003668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800366c:	480a      	ldr	r0, [pc, #40]	; (8003698 <siprintf+0x44>)
 800366e:	9104      	str	r1, [sp, #16]
 8003670:	9107      	str	r1, [sp, #28]
 8003672:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003676:	f853 2b04 	ldr.w	r2, [r3], #4
 800367a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800367e:	6800      	ldr	r0, [r0, #0]
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	a902      	add	r1, sp, #8
 8003684:	f000 f866 	bl	8003754 <_svfiprintf_r>
 8003688:	9b02      	ldr	r3, [sp, #8]
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	b01c      	add	sp, #112	; 0x70
 8003690:	f85d eb04 	ldr.w	lr, [sp], #4
 8003694:	b003      	add	sp, #12
 8003696:	4770      	bx	lr
 8003698:	20000010 	.word	0x20000010

0800369c <__ssputs_r>:
 800369c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a0:	688e      	ldr	r6, [r1, #8]
 80036a2:	429e      	cmp	r6, r3
 80036a4:	4682      	mov	sl, r0
 80036a6:	460c      	mov	r4, r1
 80036a8:	4691      	mov	r9, r2
 80036aa:	4698      	mov	r8, r3
 80036ac:	d835      	bhi.n	800371a <__ssputs_r+0x7e>
 80036ae:	898a      	ldrh	r2, [r1, #12]
 80036b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036b4:	d031      	beq.n	800371a <__ssputs_r+0x7e>
 80036b6:	6825      	ldr	r5, [r4, #0]
 80036b8:	6909      	ldr	r1, [r1, #16]
 80036ba:	1a6f      	subs	r7, r5, r1
 80036bc:	6965      	ldr	r5, [r4, #20]
 80036be:	2302      	movs	r3, #2
 80036c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80036c8:	f108 0301 	add.w	r3, r8, #1
 80036cc:	443b      	add	r3, r7
 80036ce:	429d      	cmp	r5, r3
 80036d0:	bf38      	it	cc
 80036d2:	461d      	movcc	r5, r3
 80036d4:	0553      	lsls	r3, r2, #21
 80036d6:	d531      	bpl.n	800373c <__ssputs_r+0xa0>
 80036d8:	4629      	mov	r1, r5
 80036da:	f000 fb2d 	bl	8003d38 <_malloc_r>
 80036de:	4606      	mov	r6, r0
 80036e0:	b950      	cbnz	r0, 80036f8 <__ssputs_r+0x5c>
 80036e2:	230c      	movs	r3, #12
 80036e4:	f8ca 3000 	str.w	r3, [sl]
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	f04f 30ff 	mov.w	r0, #4294967295
 80036f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036f8:	463a      	mov	r2, r7
 80036fa:	6921      	ldr	r1, [r4, #16]
 80036fc:	f7ff ff96 	bl	800362c <memcpy>
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370a:	81a3      	strh	r3, [r4, #12]
 800370c:	6126      	str	r6, [r4, #16]
 800370e:	6165      	str	r5, [r4, #20]
 8003710:	443e      	add	r6, r7
 8003712:	1bed      	subs	r5, r5, r7
 8003714:	6026      	str	r6, [r4, #0]
 8003716:	60a5      	str	r5, [r4, #8]
 8003718:	4646      	mov	r6, r8
 800371a:	4546      	cmp	r6, r8
 800371c:	bf28      	it	cs
 800371e:	4646      	movcs	r6, r8
 8003720:	4632      	mov	r2, r6
 8003722:	4649      	mov	r1, r9
 8003724:	6820      	ldr	r0, [r4, #0]
 8003726:	f000 fa9f 	bl	8003c68 <memmove>
 800372a:	68a3      	ldr	r3, [r4, #8]
 800372c:	1b9b      	subs	r3, r3, r6
 800372e:	60a3      	str	r3, [r4, #8]
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	441e      	add	r6, r3
 8003734:	6026      	str	r6, [r4, #0]
 8003736:	2000      	movs	r0, #0
 8003738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373c:	462a      	mov	r2, r5
 800373e:	f000 fb59 	bl	8003df4 <_realloc_r>
 8003742:	4606      	mov	r6, r0
 8003744:	2800      	cmp	r0, #0
 8003746:	d1e1      	bne.n	800370c <__ssputs_r+0x70>
 8003748:	6921      	ldr	r1, [r4, #16]
 800374a:	4650      	mov	r0, sl
 800374c:	f000 faa6 	bl	8003c9c <_free_r>
 8003750:	e7c7      	b.n	80036e2 <__ssputs_r+0x46>
	...

08003754 <_svfiprintf_r>:
 8003754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003758:	b09d      	sub	sp, #116	; 0x74
 800375a:	4680      	mov	r8, r0
 800375c:	9303      	str	r3, [sp, #12]
 800375e:	898b      	ldrh	r3, [r1, #12]
 8003760:	061c      	lsls	r4, r3, #24
 8003762:	460d      	mov	r5, r1
 8003764:	4616      	mov	r6, r2
 8003766:	d50f      	bpl.n	8003788 <_svfiprintf_r+0x34>
 8003768:	690b      	ldr	r3, [r1, #16]
 800376a:	b96b      	cbnz	r3, 8003788 <_svfiprintf_r+0x34>
 800376c:	2140      	movs	r1, #64	; 0x40
 800376e:	f000 fae3 	bl	8003d38 <_malloc_r>
 8003772:	6028      	str	r0, [r5, #0]
 8003774:	6128      	str	r0, [r5, #16]
 8003776:	b928      	cbnz	r0, 8003784 <_svfiprintf_r+0x30>
 8003778:	230c      	movs	r3, #12
 800377a:	f8c8 3000 	str.w	r3, [r8]
 800377e:	f04f 30ff 	mov.w	r0, #4294967295
 8003782:	e0c5      	b.n	8003910 <_svfiprintf_r+0x1bc>
 8003784:	2340      	movs	r3, #64	; 0x40
 8003786:	616b      	str	r3, [r5, #20]
 8003788:	2300      	movs	r3, #0
 800378a:	9309      	str	r3, [sp, #36]	; 0x24
 800378c:	2320      	movs	r3, #32
 800378e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003792:	2330      	movs	r3, #48	; 0x30
 8003794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003798:	f04f 0b01 	mov.w	fp, #1
 800379c:	4637      	mov	r7, r6
 800379e:	463c      	mov	r4, r7
 80037a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d13c      	bne.n	8003822 <_svfiprintf_r+0xce>
 80037a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80037ac:	d00b      	beq.n	80037c6 <_svfiprintf_r+0x72>
 80037ae:	4653      	mov	r3, sl
 80037b0:	4632      	mov	r2, r6
 80037b2:	4629      	mov	r1, r5
 80037b4:	4640      	mov	r0, r8
 80037b6:	f7ff ff71 	bl	800369c <__ssputs_r>
 80037ba:	3001      	adds	r0, #1
 80037bc:	f000 80a3 	beq.w	8003906 <_svfiprintf_r+0x1b2>
 80037c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c2:	4453      	add	r3, sl
 80037c4:	9309      	str	r3, [sp, #36]	; 0x24
 80037c6:	783b      	ldrb	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 809c 	beq.w	8003906 <_svfiprintf_r+0x1b2>
 80037ce:	2300      	movs	r3, #0
 80037d0:	f04f 32ff 	mov.w	r2, #4294967295
 80037d4:	9304      	str	r3, [sp, #16]
 80037d6:	9307      	str	r3, [sp, #28]
 80037d8:	9205      	str	r2, [sp, #20]
 80037da:	9306      	str	r3, [sp, #24]
 80037dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037e0:	931a      	str	r3, [sp, #104]	; 0x68
 80037e2:	2205      	movs	r2, #5
 80037e4:	7821      	ldrb	r1, [r4, #0]
 80037e6:	4850      	ldr	r0, [pc, #320]	; (8003928 <_svfiprintf_r+0x1d4>)
 80037e8:	f7fc fcf2 	bl	80001d0 <memchr>
 80037ec:	1c67      	adds	r7, r4, #1
 80037ee:	9b04      	ldr	r3, [sp, #16]
 80037f0:	b9d8      	cbnz	r0, 800382a <_svfiprintf_r+0xd6>
 80037f2:	06d9      	lsls	r1, r3, #27
 80037f4:	bf44      	itt	mi
 80037f6:	2220      	movmi	r2, #32
 80037f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80037fc:	071a      	lsls	r2, r3, #28
 80037fe:	bf44      	itt	mi
 8003800:	222b      	movmi	r2, #43	; 0x2b
 8003802:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003806:	7822      	ldrb	r2, [r4, #0]
 8003808:	2a2a      	cmp	r2, #42	; 0x2a
 800380a:	d016      	beq.n	800383a <_svfiprintf_r+0xe6>
 800380c:	9a07      	ldr	r2, [sp, #28]
 800380e:	2100      	movs	r1, #0
 8003810:	200a      	movs	r0, #10
 8003812:	4627      	mov	r7, r4
 8003814:	3401      	adds	r4, #1
 8003816:	783b      	ldrb	r3, [r7, #0]
 8003818:	3b30      	subs	r3, #48	; 0x30
 800381a:	2b09      	cmp	r3, #9
 800381c:	d951      	bls.n	80038c2 <_svfiprintf_r+0x16e>
 800381e:	b1c9      	cbz	r1, 8003854 <_svfiprintf_r+0x100>
 8003820:	e011      	b.n	8003846 <_svfiprintf_r+0xf2>
 8003822:	2b25      	cmp	r3, #37	; 0x25
 8003824:	d0c0      	beq.n	80037a8 <_svfiprintf_r+0x54>
 8003826:	4627      	mov	r7, r4
 8003828:	e7b9      	b.n	800379e <_svfiprintf_r+0x4a>
 800382a:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <_svfiprintf_r+0x1d4>)
 800382c:	1a80      	subs	r0, r0, r2
 800382e:	fa0b f000 	lsl.w	r0, fp, r0
 8003832:	4318      	orrs	r0, r3
 8003834:	9004      	str	r0, [sp, #16]
 8003836:	463c      	mov	r4, r7
 8003838:	e7d3      	b.n	80037e2 <_svfiprintf_r+0x8e>
 800383a:	9a03      	ldr	r2, [sp, #12]
 800383c:	1d11      	adds	r1, r2, #4
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	9103      	str	r1, [sp, #12]
 8003842:	2a00      	cmp	r2, #0
 8003844:	db01      	blt.n	800384a <_svfiprintf_r+0xf6>
 8003846:	9207      	str	r2, [sp, #28]
 8003848:	e004      	b.n	8003854 <_svfiprintf_r+0x100>
 800384a:	4252      	negs	r2, r2
 800384c:	f043 0302 	orr.w	r3, r3, #2
 8003850:	9207      	str	r2, [sp, #28]
 8003852:	9304      	str	r3, [sp, #16]
 8003854:	783b      	ldrb	r3, [r7, #0]
 8003856:	2b2e      	cmp	r3, #46	; 0x2e
 8003858:	d10e      	bne.n	8003878 <_svfiprintf_r+0x124>
 800385a:	787b      	ldrb	r3, [r7, #1]
 800385c:	2b2a      	cmp	r3, #42	; 0x2a
 800385e:	f107 0101 	add.w	r1, r7, #1
 8003862:	d132      	bne.n	80038ca <_svfiprintf_r+0x176>
 8003864:	9b03      	ldr	r3, [sp, #12]
 8003866:	1d1a      	adds	r2, r3, #4
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	9203      	str	r2, [sp, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	bfb8      	it	lt
 8003870:	f04f 33ff 	movlt.w	r3, #4294967295
 8003874:	3702      	adds	r7, #2
 8003876:	9305      	str	r3, [sp, #20]
 8003878:	4c2c      	ldr	r4, [pc, #176]	; (800392c <_svfiprintf_r+0x1d8>)
 800387a:	7839      	ldrb	r1, [r7, #0]
 800387c:	2203      	movs	r2, #3
 800387e:	4620      	mov	r0, r4
 8003880:	f7fc fca6 	bl	80001d0 <memchr>
 8003884:	b138      	cbz	r0, 8003896 <_svfiprintf_r+0x142>
 8003886:	2340      	movs	r3, #64	; 0x40
 8003888:	1b00      	subs	r0, r0, r4
 800388a:	fa03 f000 	lsl.w	r0, r3, r0
 800388e:	9b04      	ldr	r3, [sp, #16]
 8003890:	4303      	orrs	r3, r0
 8003892:	9304      	str	r3, [sp, #16]
 8003894:	3701      	adds	r7, #1
 8003896:	7839      	ldrb	r1, [r7, #0]
 8003898:	4825      	ldr	r0, [pc, #148]	; (8003930 <_svfiprintf_r+0x1dc>)
 800389a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800389e:	2206      	movs	r2, #6
 80038a0:	1c7e      	adds	r6, r7, #1
 80038a2:	f7fc fc95 	bl	80001d0 <memchr>
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d035      	beq.n	8003916 <_svfiprintf_r+0x1c2>
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <_svfiprintf_r+0x1e0>)
 80038ac:	b9fb      	cbnz	r3, 80038ee <_svfiprintf_r+0x19a>
 80038ae:	9b03      	ldr	r3, [sp, #12]
 80038b0:	3307      	adds	r3, #7
 80038b2:	f023 0307 	bic.w	r3, r3, #7
 80038b6:	3308      	adds	r3, #8
 80038b8:	9303      	str	r3, [sp, #12]
 80038ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038bc:	444b      	add	r3, r9
 80038be:	9309      	str	r3, [sp, #36]	; 0x24
 80038c0:	e76c      	b.n	800379c <_svfiprintf_r+0x48>
 80038c2:	fb00 3202 	mla	r2, r0, r2, r3
 80038c6:	2101      	movs	r1, #1
 80038c8:	e7a3      	b.n	8003812 <_svfiprintf_r+0xbe>
 80038ca:	2300      	movs	r3, #0
 80038cc:	9305      	str	r3, [sp, #20]
 80038ce:	4618      	mov	r0, r3
 80038d0:	240a      	movs	r4, #10
 80038d2:	460f      	mov	r7, r1
 80038d4:	3101      	adds	r1, #1
 80038d6:	783a      	ldrb	r2, [r7, #0]
 80038d8:	3a30      	subs	r2, #48	; 0x30
 80038da:	2a09      	cmp	r2, #9
 80038dc:	d903      	bls.n	80038e6 <_svfiprintf_r+0x192>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ca      	beq.n	8003878 <_svfiprintf_r+0x124>
 80038e2:	9005      	str	r0, [sp, #20]
 80038e4:	e7c8      	b.n	8003878 <_svfiprintf_r+0x124>
 80038e6:	fb04 2000 	mla	r0, r4, r0, r2
 80038ea:	2301      	movs	r3, #1
 80038ec:	e7f1      	b.n	80038d2 <_svfiprintf_r+0x17e>
 80038ee:	ab03      	add	r3, sp, #12
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	462a      	mov	r2, r5
 80038f4:	4b10      	ldr	r3, [pc, #64]	; (8003938 <_svfiprintf_r+0x1e4>)
 80038f6:	a904      	add	r1, sp, #16
 80038f8:	4640      	mov	r0, r8
 80038fa:	f3af 8000 	nop.w
 80038fe:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003902:	4681      	mov	r9, r0
 8003904:	d1d9      	bne.n	80038ba <_svfiprintf_r+0x166>
 8003906:	89ab      	ldrh	r3, [r5, #12]
 8003908:	065b      	lsls	r3, r3, #25
 800390a:	f53f af38 	bmi.w	800377e <_svfiprintf_r+0x2a>
 800390e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003910:	b01d      	add	sp, #116	; 0x74
 8003912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003916:	ab03      	add	r3, sp, #12
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	462a      	mov	r2, r5
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <_svfiprintf_r+0x1e4>)
 800391e:	a904      	add	r1, sp, #16
 8003920:	4640      	mov	r0, r8
 8003922:	f000 f881 	bl	8003a28 <_printf_i>
 8003926:	e7ea      	b.n	80038fe <_svfiprintf_r+0x1aa>
 8003928:	08003f4a 	.word	0x08003f4a
 800392c:	08003f50 	.word	0x08003f50
 8003930:	08003f54 	.word	0x08003f54
 8003934:	00000000 	.word	0x00000000
 8003938:	0800369d 	.word	0x0800369d

0800393c <_printf_common>:
 800393c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003940:	4691      	mov	r9, r2
 8003942:	461f      	mov	r7, r3
 8003944:	688a      	ldr	r2, [r1, #8]
 8003946:	690b      	ldr	r3, [r1, #16]
 8003948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800394c:	4293      	cmp	r3, r2
 800394e:	bfb8      	it	lt
 8003950:	4613      	movlt	r3, r2
 8003952:	f8c9 3000 	str.w	r3, [r9]
 8003956:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800395a:	4606      	mov	r6, r0
 800395c:	460c      	mov	r4, r1
 800395e:	b112      	cbz	r2, 8003966 <_printf_common+0x2a>
 8003960:	3301      	adds	r3, #1
 8003962:	f8c9 3000 	str.w	r3, [r9]
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	0699      	lsls	r1, r3, #26
 800396a:	bf42      	ittt	mi
 800396c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003970:	3302      	addmi	r3, #2
 8003972:	f8c9 3000 	strmi.w	r3, [r9]
 8003976:	6825      	ldr	r5, [r4, #0]
 8003978:	f015 0506 	ands.w	r5, r5, #6
 800397c:	d107      	bne.n	800398e <_printf_common+0x52>
 800397e:	f104 0a19 	add.w	sl, r4, #25
 8003982:	68e3      	ldr	r3, [r4, #12]
 8003984:	f8d9 2000 	ldr.w	r2, [r9]
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	429d      	cmp	r5, r3
 800398c:	db29      	blt.n	80039e2 <_printf_common+0xa6>
 800398e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	3300      	adds	r3, #0
 8003996:	bf18      	it	ne
 8003998:	2301      	movne	r3, #1
 800399a:	0692      	lsls	r2, r2, #26
 800399c:	d42e      	bmi.n	80039fc <_printf_common+0xc0>
 800399e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039a2:	4639      	mov	r1, r7
 80039a4:	4630      	mov	r0, r6
 80039a6:	47c0      	blx	r8
 80039a8:	3001      	adds	r0, #1
 80039aa:	d021      	beq.n	80039f0 <_printf_common+0xb4>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	68e5      	ldr	r5, [r4, #12]
 80039b0:	f8d9 2000 	ldr.w	r2, [r9]
 80039b4:	f003 0306 	and.w	r3, r3, #6
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	bf08      	it	eq
 80039bc:	1aad      	subeq	r5, r5, r2
 80039be:	68a3      	ldr	r3, [r4, #8]
 80039c0:	6922      	ldr	r2, [r4, #16]
 80039c2:	bf0c      	ite	eq
 80039c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039c8:	2500      	movne	r5, #0
 80039ca:	4293      	cmp	r3, r2
 80039cc:	bfc4      	itt	gt
 80039ce:	1a9b      	subgt	r3, r3, r2
 80039d0:	18ed      	addgt	r5, r5, r3
 80039d2:	f04f 0900 	mov.w	r9, #0
 80039d6:	341a      	adds	r4, #26
 80039d8:	454d      	cmp	r5, r9
 80039da:	d11b      	bne.n	8003a14 <_printf_common+0xd8>
 80039dc:	2000      	movs	r0, #0
 80039de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e2:	2301      	movs	r3, #1
 80039e4:	4652      	mov	r2, sl
 80039e6:	4639      	mov	r1, r7
 80039e8:	4630      	mov	r0, r6
 80039ea:	47c0      	blx	r8
 80039ec:	3001      	adds	r0, #1
 80039ee:	d103      	bne.n	80039f8 <_printf_common+0xbc>
 80039f0:	f04f 30ff 	mov.w	r0, #4294967295
 80039f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f8:	3501      	adds	r5, #1
 80039fa:	e7c2      	b.n	8003982 <_printf_common+0x46>
 80039fc:	18e1      	adds	r1, r4, r3
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	2030      	movs	r0, #48	; 0x30
 8003a02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a06:	4422      	add	r2, r4
 8003a08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a10:	3302      	adds	r3, #2
 8003a12:	e7c4      	b.n	800399e <_printf_common+0x62>
 8003a14:	2301      	movs	r3, #1
 8003a16:	4622      	mov	r2, r4
 8003a18:	4639      	mov	r1, r7
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	47c0      	blx	r8
 8003a1e:	3001      	adds	r0, #1
 8003a20:	d0e6      	beq.n	80039f0 <_printf_common+0xb4>
 8003a22:	f109 0901 	add.w	r9, r9, #1
 8003a26:	e7d7      	b.n	80039d8 <_printf_common+0x9c>

08003a28 <_printf_i>:
 8003a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a2c:	4617      	mov	r7, r2
 8003a2e:	7e0a      	ldrb	r2, [r1, #24]
 8003a30:	b085      	sub	sp, #20
 8003a32:	2a6e      	cmp	r2, #110	; 0x6e
 8003a34:	4698      	mov	r8, r3
 8003a36:	4606      	mov	r6, r0
 8003a38:	460c      	mov	r4, r1
 8003a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a3c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003a40:	f000 80bc 	beq.w	8003bbc <_printf_i+0x194>
 8003a44:	d81a      	bhi.n	8003a7c <_printf_i+0x54>
 8003a46:	2a63      	cmp	r2, #99	; 0x63
 8003a48:	d02e      	beq.n	8003aa8 <_printf_i+0x80>
 8003a4a:	d80a      	bhi.n	8003a62 <_printf_i+0x3a>
 8003a4c:	2a00      	cmp	r2, #0
 8003a4e:	f000 80c8 	beq.w	8003be2 <_printf_i+0x1ba>
 8003a52:	2a58      	cmp	r2, #88	; 0x58
 8003a54:	f000 808a 	beq.w	8003b6c <_printf_i+0x144>
 8003a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a5c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003a60:	e02a      	b.n	8003ab8 <_printf_i+0x90>
 8003a62:	2a64      	cmp	r2, #100	; 0x64
 8003a64:	d001      	beq.n	8003a6a <_printf_i+0x42>
 8003a66:	2a69      	cmp	r2, #105	; 0x69
 8003a68:	d1f6      	bne.n	8003a58 <_printf_i+0x30>
 8003a6a:	6821      	ldr	r1, [r4, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a72:	d023      	beq.n	8003abc <_printf_i+0x94>
 8003a74:	1d11      	adds	r1, r2, #4
 8003a76:	6019      	str	r1, [r3, #0]
 8003a78:	6813      	ldr	r3, [r2, #0]
 8003a7a:	e027      	b.n	8003acc <_printf_i+0xa4>
 8003a7c:	2a73      	cmp	r2, #115	; 0x73
 8003a7e:	f000 80b4 	beq.w	8003bea <_printf_i+0x1c2>
 8003a82:	d808      	bhi.n	8003a96 <_printf_i+0x6e>
 8003a84:	2a6f      	cmp	r2, #111	; 0x6f
 8003a86:	d02a      	beq.n	8003ade <_printf_i+0xb6>
 8003a88:	2a70      	cmp	r2, #112	; 0x70
 8003a8a:	d1e5      	bne.n	8003a58 <_printf_i+0x30>
 8003a8c:	680a      	ldr	r2, [r1, #0]
 8003a8e:	f042 0220 	orr.w	r2, r2, #32
 8003a92:	600a      	str	r2, [r1, #0]
 8003a94:	e003      	b.n	8003a9e <_printf_i+0x76>
 8003a96:	2a75      	cmp	r2, #117	; 0x75
 8003a98:	d021      	beq.n	8003ade <_printf_i+0xb6>
 8003a9a:	2a78      	cmp	r2, #120	; 0x78
 8003a9c:	d1dc      	bne.n	8003a58 <_printf_i+0x30>
 8003a9e:	2278      	movs	r2, #120	; 0x78
 8003aa0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003aa4:	496e      	ldr	r1, [pc, #440]	; (8003c60 <_printf_i+0x238>)
 8003aa6:	e064      	b.n	8003b72 <_printf_i+0x14a>
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003aae:	1d11      	adds	r1, r2, #4
 8003ab0:	6019      	str	r1, [r3, #0]
 8003ab2:	6813      	ldr	r3, [r2, #0]
 8003ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0a3      	b.n	8003c04 <_printf_i+0x1dc>
 8003abc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003ac0:	f102 0104 	add.w	r1, r2, #4
 8003ac4:	6019      	str	r1, [r3, #0]
 8003ac6:	d0d7      	beq.n	8003a78 <_printf_i+0x50>
 8003ac8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	da03      	bge.n	8003ad8 <_printf_i+0xb0>
 8003ad0:	222d      	movs	r2, #45	; 0x2d
 8003ad2:	425b      	negs	r3, r3
 8003ad4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ad8:	4962      	ldr	r1, [pc, #392]	; (8003c64 <_printf_i+0x23c>)
 8003ada:	220a      	movs	r2, #10
 8003adc:	e017      	b.n	8003b0e <_printf_i+0xe6>
 8003ade:	6820      	ldr	r0, [r4, #0]
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003ae6:	d003      	beq.n	8003af0 <_printf_i+0xc8>
 8003ae8:	1d08      	adds	r0, r1, #4
 8003aea:	6018      	str	r0, [r3, #0]
 8003aec:	680b      	ldr	r3, [r1, #0]
 8003aee:	e006      	b.n	8003afe <_printf_i+0xd6>
 8003af0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003af4:	f101 0004 	add.w	r0, r1, #4
 8003af8:	6018      	str	r0, [r3, #0]
 8003afa:	d0f7      	beq.n	8003aec <_printf_i+0xc4>
 8003afc:	880b      	ldrh	r3, [r1, #0]
 8003afe:	4959      	ldr	r1, [pc, #356]	; (8003c64 <_printf_i+0x23c>)
 8003b00:	2a6f      	cmp	r2, #111	; 0x6f
 8003b02:	bf14      	ite	ne
 8003b04:	220a      	movne	r2, #10
 8003b06:	2208      	moveq	r2, #8
 8003b08:	2000      	movs	r0, #0
 8003b0a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003b0e:	6865      	ldr	r5, [r4, #4]
 8003b10:	60a5      	str	r5, [r4, #8]
 8003b12:	2d00      	cmp	r5, #0
 8003b14:	f2c0 809c 	blt.w	8003c50 <_printf_i+0x228>
 8003b18:	6820      	ldr	r0, [r4, #0]
 8003b1a:	f020 0004 	bic.w	r0, r0, #4
 8003b1e:	6020      	str	r0, [r4, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d13f      	bne.n	8003ba4 <_printf_i+0x17c>
 8003b24:	2d00      	cmp	r5, #0
 8003b26:	f040 8095 	bne.w	8003c54 <_printf_i+0x22c>
 8003b2a:	4675      	mov	r5, lr
 8003b2c:	2a08      	cmp	r2, #8
 8003b2e:	d10b      	bne.n	8003b48 <_printf_i+0x120>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	07da      	lsls	r2, r3, #31
 8003b34:	d508      	bpl.n	8003b48 <_printf_i+0x120>
 8003b36:	6923      	ldr	r3, [r4, #16]
 8003b38:	6862      	ldr	r2, [r4, #4]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	bfde      	ittt	le
 8003b3e:	2330      	movle	r3, #48	; 0x30
 8003b40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b48:	ebae 0305 	sub.w	r3, lr, r5
 8003b4c:	6123      	str	r3, [r4, #16]
 8003b4e:	f8cd 8000 	str.w	r8, [sp]
 8003b52:	463b      	mov	r3, r7
 8003b54:	aa03      	add	r2, sp, #12
 8003b56:	4621      	mov	r1, r4
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f7ff feef 	bl	800393c <_printf_common>
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d155      	bne.n	8003c0e <_printf_i+0x1e6>
 8003b62:	f04f 30ff 	mov.w	r0, #4294967295
 8003b66:	b005      	add	sp, #20
 8003b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b6c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003b70:	493c      	ldr	r1, [pc, #240]	; (8003c64 <_printf_i+0x23c>)
 8003b72:	6822      	ldr	r2, [r4, #0]
 8003b74:	6818      	ldr	r0, [r3, #0]
 8003b76:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b7a:	f100 0504 	add.w	r5, r0, #4
 8003b7e:	601d      	str	r5, [r3, #0]
 8003b80:	d001      	beq.n	8003b86 <_printf_i+0x15e>
 8003b82:	6803      	ldr	r3, [r0, #0]
 8003b84:	e002      	b.n	8003b8c <_printf_i+0x164>
 8003b86:	0655      	lsls	r5, r2, #25
 8003b88:	d5fb      	bpl.n	8003b82 <_printf_i+0x15a>
 8003b8a:	8803      	ldrh	r3, [r0, #0]
 8003b8c:	07d0      	lsls	r0, r2, #31
 8003b8e:	bf44      	itt	mi
 8003b90:	f042 0220 	orrmi.w	r2, r2, #32
 8003b94:	6022      	strmi	r2, [r4, #0]
 8003b96:	b91b      	cbnz	r3, 8003ba0 <_printf_i+0x178>
 8003b98:	6822      	ldr	r2, [r4, #0]
 8003b9a:	f022 0220 	bic.w	r2, r2, #32
 8003b9e:	6022      	str	r2, [r4, #0]
 8003ba0:	2210      	movs	r2, #16
 8003ba2:	e7b1      	b.n	8003b08 <_printf_i+0xe0>
 8003ba4:	4675      	mov	r5, lr
 8003ba6:	fbb3 f0f2 	udiv	r0, r3, r2
 8003baa:	fb02 3310 	mls	r3, r2, r0, r3
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d1f5      	bne.n	8003ba6 <_printf_i+0x17e>
 8003bba:	e7b7      	b.n	8003b2c <_printf_i+0x104>
 8003bbc:	6808      	ldr	r0, [r1, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	6949      	ldr	r1, [r1, #20]
 8003bc2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003bc6:	d004      	beq.n	8003bd2 <_printf_i+0x1aa>
 8003bc8:	1d10      	adds	r0, r2, #4
 8003bca:	6018      	str	r0, [r3, #0]
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	6019      	str	r1, [r3, #0]
 8003bd0:	e007      	b.n	8003be2 <_printf_i+0x1ba>
 8003bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bd6:	f102 0004 	add.w	r0, r2, #4
 8003bda:	6018      	str	r0, [r3, #0]
 8003bdc:	6813      	ldr	r3, [r2, #0]
 8003bde:	d0f6      	beq.n	8003bce <_printf_i+0x1a6>
 8003be0:	8019      	strh	r1, [r3, #0]
 8003be2:	2300      	movs	r3, #0
 8003be4:	6123      	str	r3, [r4, #16]
 8003be6:	4675      	mov	r5, lr
 8003be8:	e7b1      	b.n	8003b4e <_printf_i+0x126>
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	1d11      	adds	r1, r2, #4
 8003bee:	6019      	str	r1, [r3, #0]
 8003bf0:	6815      	ldr	r5, [r2, #0]
 8003bf2:	6862      	ldr	r2, [r4, #4]
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f7fc faea 	bl	80001d0 <memchr>
 8003bfc:	b108      	cbz	r0, 8003c02 <_printf_i+0x1da>
 8003bfe:	1b40      	subs	r0, r0, r5
 8003c00:	6060      	str	r0, [r4, #4]
 8003c02:	6863      	ldr	r3, [r4, #4]
 8003c04:	6123      	str	r3, [r4, #16]
 8003c06:	2300      	movs	r3, #0
 8003c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c0c:	e79f      	b.n	8003b4e <_printf_i+0x126>
 8003c0e:	6923      	ldr	r3, [r4, #16]
 8003c10:	462a      	mov	r2, r5
 8003c12:	4639      	mov	r1, r7
 8003c14:	4630      	mov	r0, r6
 8003c16:	47c0      	blx	r8
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d0a2      	beq.n	8003b62 <_printf_i+0x13a>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	079b      	lsls	r3, r3, #30
 8003c20:	d507      	bpl.n	8003c32 <_printf_i+0x20a>
 8003c22:	2500      	movs	r5, #0
 8003c24:	f104 0919 	add.w	r9, r4, #25
 8003c28:	68e3      	ldr	r3, [r4, #12]
 8003c2a:	9a03      	ldr	r2, [sp, #12]
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	429d      	cmp	r5, r3
 8003c30:	db05      	blt.n	8003c3e <_printf_i+0x216>
 8003c32:	68e0      	ldr	r0, [r4, #12]
 8003c34:	9b03      	ldr	r3, [sp, #12]
 8003c36:	4298      	cmp	r0, r3
 8003c38:	bfb8      	it	lt
 8003c3a:	4618      	movlt	r0, r3
 8003c3c:	e793      	b.n	8003b66 <_printf_i+0x13e>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	464a      	mov	r2, r9
 8003c42:	4639      	mov	r1, r7
 8003c44:	4630      	mov	r0, r6
 8003c46:	47c0      	blx	r8
 8003c48:	3001      	adds	r0, #1
 8003c4a:	d08a      	beq.n	8003b62 <_printf_i+0x13a>
 8003c4c:	3501      	adds	r5, #1
 8003c4e:	e7eb      	b.n	8003c28 <_printf_i+0x200>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1a7      	bne.n	8003ba4 <_printf_i+0x17c>
 8003c54:	780b      	ldrb	r3, [r1, #0]
 8003c56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c5e:	e765      	b.n	8003b2c <_printf_i+0x104>
 8003c60:	08003f6c 	.word	0x08003f6c
 8003c64:	08003f5b 	.word	0x08003f5b

08003c68 <memmove>:
 8003c68:	4288      	cmp	r0, r1
 8003c6a:	b510      	push	{r4, lr}
 8003c6c:	eb01 0302 	add.w	r3, r1, r2
 8003c70:	d803      	bhi.n	8003c7a <memmove+0x12>
 8003c72:	1e42      	subs	r2, r0, #1
 8003c74:	4299      	cmp	r1, r3
 8003c76:	d10c      	bne.n	8003c92 <memmove+0x2a>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	4298      	cmp	r0, r3
 8003c7c:	d2f9      	bcs.n	8003c72 <memmove+0xa>
 8003c7e:	1881      	adds	r1, r0, r2
 8003c80:	1ad2      	subs	r2, r2, r3
 8003c82:	42d3      	cmn	r3, r2
 8003c84:	d100      	bne.n	8003c88 <memmove+0x20>
 8003c86:	bd10      	pop	{r4, pc}
 8003c88:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c8c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c90:	e7f7      	b.n	8003c82 <memmove+0x1a>
 8003c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c96:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c9a:	e7eb      	b.n	8003c74 <memmove+0xc>

08003c9c <_free_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d045      	beq.n	8003d30 <_free_r+0x94>
 8003ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca8:	1f0c      	subs	r4, r1, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bfb8      	it	lt
 8003cae:	18e4      	addlt	r4, r4, r3
 8003cb0:	f000 f8d6 	bl	8003e60 <__malloc_lock>
 8003cb4:	4a1f      	ldr	r2, [pc, #124]	; (8003d34 <_free_r+0x98>)
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	4610      	mov	r0, r2
 8003cba:	b933      	cbnz	r3, 8003cca <_free_r+0x2e>
 8003cbc:	6063      	str	r3, [r4, #4]
 8003cbe:	6014      	str	r4, [r2, #0]
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cc6:	f000 b8cc 	b.w	8003e62 <__malloc_unlock>
 8003cca:	42a3      	cmp	r3, r4
 8003ccc:	d90c      	bls.n	8003ce8 <_free_r+0x4c>
 8003cce:	6821      	ldr	r1, [r4, #0]
 8003cd0:	1862      	adds	r2, r4, r1
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	bf04      	itt	eq
 8003cd6:	681a      	ldreq	r2, [r3, #0]
 8003cd8:	685b      	ldreq	r3, [r3, #4]
 8003cda:	6063      	str	r3, [r4, #4]
 8003cdc:	bf04      	itt	eq
 8003cde:	1852      	addeq	r2, r2, r1
 8003ce0:	6022      	streq	r2, [r4, #0]
 8003ce2:	6004      	str	r4, [r0, #0]
 8003ce4:	e7ec      	b.n	8003cc0 <_free_r+0x24>
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	b10a      	cbz	r2, 8003cf0 <_free_r+0x54>
 8003cec:	42a2      	cmp	r2, r4
 8003cee:	d9fa      	bls.n	8003ce6 <_free_r+0x4a>
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	1858      	adds	r0, r3, r1
 8003cf4:	42a0      	cmp	r0, r4
 8003cf6:	d10b      	bne.n	8003d10 <_free_r+0x74>
 8003cf8:	6820      	ldr	r0, [r4, #0]
 8003cfa:	4401      	add	r1, r0
 8003cfc:	1858      	adds	r0, r3, r1
 8003cfe:	4282      	cmp	r2, r0
 8003d00:	6019      	str	r1, [r3, #0]
 8003d02:	d1dd      	bne.n	8003cc0 <_free_r+0x24>
 8003d04:	6810      	ldr	r0, [r2, #0]
 8003d06:	6852      	ldr	r2, [r2, #4]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	4401      	add	r1, r0
 8003d0c:	6019      	str	r1, [r3, #0]
 8003d0e:	e7d7      	b.n	8003cc0 <_free_r+0x24>
 8003d10:	d902      	bls.n	8003d18 <_free_r+0x7c>
 8003d12:	230c      	movs	r3, #12
 8003d14:	602b      	str	r3, [r5, #0]
 8003d16:	e7d3      	b.n	8003cc0 <_free_r+0x24>
 8003d18:	6820      	ldr	r0, [r4, #0]
 8003d1a:	1821      	adds	r1, r4, r0
 8003d1c:	428a      	cmp	r2, r1
 8003d1e:	bf04      	itt	eq
 8003d20:	6811      	ldreq	r1, [r2, #0]
 8003d22:	6852      	ldreq	r2, [r2, #4]
 8003d24:	6062      	str	r2, [r4, #4]
 8003d26:	bf04      	itt	eq
 8003d28:	1809      	addeq	r1, r1, r0
 8003d2a:	6021      	streq	r1, [r4, #0]
 8003d2c:	605c      	str	r4, [r3, #4]
 8003d2e:	e7c7      	b.n	8003cc0 <_free_r+0x24>
 8003d30:	bd38      	pop	{r3, r4, r5, pc}
 8003d32:	bf00      	nop
 8003d34:	20000de8 	.word	0x20000de8

08003d38 <_malloc_r>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	1ccd      	adds	r5, r1, #3
 8003d3c:	f025 0503 	bic.w	r5, r5, #3
 8003d40:	3508      	adds	r5, #8
 8003d42:	2d0c      	cmp	r5, #12
 8003d44:	bf38      	it	cc
 8003d46:	250c      	movcc	r5, #12
 8003d48:	2d00      	cmp	r5, #0
 8003d4a:	4606      	mov	r6, r0
 8003d4c:	db01      	blt.n	8003d52 <_malloc_r+0x1a>
 8003d4e:	42a9      	cmp	r1, r5
 8003d50:	d903      	bls.n	8003d5a <_malloc_r+0x22>
 8003d52:	230c      	movs	r3, #12
 8003d54:	6033      	str	r3, [r6, #0]
 8003d56:	2000      	movs	r0, #0
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	f000 f881 	bl	8003e60 <__malloc_lock>
 8003d5e:	4a23      	ldr	r2, [pc, #140]	; (8003dec <_malloc_r+0xb4>)
 8003d60:	6814      	ldr	r4, [r2, #0]
 8003d62:	4621      	mov	r1, r4
 8003d64:	b991      	cbnz	r1, 8003d8c <_malloc_r+0x54>
 8003d66:	4c22      	ldr	r4, [pc, #136]	; (8003df0 <_malloc_r+0xb8>)
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	b91b      	cbnz	r3, 8003d74 <_malloc_r+0x3c>
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f000 f867 	bl	8003e40 <_sbrk_r>
 8003d72:	6020      	str	r0, [r4, #0]
 8003d74:	4629      	mov	r1, r5
 8003d76:	4630      	mov	r0, r6
 8003d78:	f000 f862 	bl	8003e40 <_sbrk_r>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d126      	bne.n	8003dce <_malloc_r+0x96>
 8003d80:	230c      	movs	r3, #12
 8003d82:	6033      	str	r3, [r6, #0]
 8003d84:	4630      	mov	r0, r6
 8003d86:	f000 f86c 	bl	8003e62 <__malloc_unlock>
 8003d8a:	e7e4      	b.n	8003d56 <_malloc_r+0x1e>
 8003d8c:	680b      	ldr	r3, [r1, #0]
 8003d8e:	1b5b      	subs	r3, r3, r5
 8003d90:	d41a      	bmi.n	8003dc8 <_malloc_r+0x90>
 8003d92:	2b0b      	cmp	r3, #11
 8003d94:	d90f      	bls.n	8003db6 <_malloc_r+0x7e>
 8003d96:	600b      	str	r3, [r1, #0]
 8003d98:	50cd      	str	r5, [r1, r3]
 8003d9a:	18cc      	adds	r4, r1, r3
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 f860 	bl	8003e62 <__malloc_unlock>
 8003da2:	f104 000b 	add.w	r0, r4, #11
 8003da6:	1d23      	adds	r3, r4, #4
 8003da8:	f020 0007 	bic.w	r0, r0, #7
 8003dac:	1ac3      	subs	r3, r0, r3
 8003dae:	d01b      	beq.n	8003de8 <_malloc_r+0xb0>
 8003db0:	425a      	negs	r2, r3
 8003db2:	50e2      	str	r2, [r4, r3]
 8003db4:	bd70      	pop	{r4, r5, r6, pc}
 8003db6:	428c      	cmp	r4, r1
 8003db8:	bf0d      	iteet	eq
 8003dba:	6863      	ldreq	r3, [r4, #4]
 8003dbc:	684b      	ldrne	r3, [r1, #4]
 8003dbe:	6063      	strne	r3, [r4, #4]
 8003dc0:	6013      	streq	r3, [r2, #0]
 8003dc2:	bf18      	it	ne
 8003dc4:	460c      	movne	r4, r1
 8003dc6:	e7e9      	b.n	8003d9c <_malloc_r+0x64>
 8003dc8:	460c      	mov	r4, r1
 8003dca:	6849      	ldr	r1, [r1, #4]
 8003dcc:	e7ca      	b.n	8003d64 <_malloc_r+0x2c>
 8003dce:	1cc4      	adds	r4, r0, #3
 8003dd0:	f024 0403 	bic.w	r4, r4, #3
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d005      	beq.n	8003de4 <_malloc_r+0xac>
 8003dd8:	1a21      	subs	r1, r4, r0
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f000 f830 	bl	8003e40 <_sbrk_r>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d0cd      	beq.n	8003d80 <_malloc_r+0x48>
 8003de4:	6025      	str	r5, [r4, #0]
 8003de6:	e7d9      	b.n	8003d9c <_malloc_r+0x64>
 8003de8:	bd70      	pop	{r4, r5, r6, pc}
 8003dea:	bf00      	nop
 8003dec:	20000de8 	.word	0x20000de8
 8003df0:	20000dec 	.word	0x20000dec

08003df4 <_realloc_r>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	4607      	mov	r7, r0
 8003df8:	4614      	mov	r4, r2
 8003dfa:	460e      	mov	r6, r1
 8003dfc:	b921      	cbnz	r1, 8003e08 <_realloc_r+0x14>
 8003dfe:	4611      	mov	r1, r2
 8003e00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e04:	f7ff bf98 	b.w	8003d38 <_malloc_r>
 8003e08:	b922      	cbnz	r2, 8003e14 <_realloc_r+0x20>
 8003e0a:	f7ff ff47 	bl	8003c9c <_free_r>
 8003e0e:	4625      	mov	r5, r4
 8003e10:	4628      	mov	r0, r5
 8003e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e14:	f000 f826 	bl	8003e64 <_malloc_usable_size_r>
 8003e18:	4284      	cmp	r4, r0
 8003e1a:	d90f      	bls.n	8003e3c <_realloc_r+0x48>
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4638      	mov	r0, r7
 8003e20:	f7ff ff8a 	bl	8003d38 <_malloc_r>
 8003e24:	4605      	mov	r5, r0
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d0f2      	beq.n	8003e10 <_realloc_r+0x1c>
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	f7ff fbfd 	bl	800362c <memcpy>
 8003e32:	4631      	mov	r1, r6
 8003e34:	4638      	mov	r0, r7
 8003e36:	f7ff ff31 	bl	8003c9c <_free_r>
 8003e3a:	e7e9      	b.n	8003e10 <_realloc_r+0x1c>
 8003e3c:	4635      	mov	r5, r6
 8003e3e:	e7e7      	b.n	8003e10 <_realloc_r+0x1c>

08003e40 <_sbrk_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4c06      	ldr	r4, [pc, #24]	; (8003e5c <_sbrk_r+0x1c>)
 8003e44:	2300      	movs	r3, #0
 8003e46:	4605      	mov	r5, r0
 8003e48:	4608      	mov	r0, r1
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	f000 f814 	bl	8003e78 <_sbrk>
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d102      	bne.n	8003e5a <_sbrk_r+0x1a>
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	b103      	cbz	r3, 8003e5a <_sbrk_r+0x1a>
 8003e58:	602b      	str	r3, [r5, #0]
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
 8003e5c:	20000ef8 	.word	0x20000ef8

08003e60 <__malloc_lock>:
 8003e60:	4770      	bx	lr

08003e62 <__malloc_unlock>:
 8003e62:	4770      	bx	lr

08003e64 <_malloc_usable_size_r>:
 8003e64:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	f1a0 0004 	sub.w	r0, r0, #4
 8003e6e:	bfbc      	itt	lt
 8003e70:	580b      	ldrlt	r3, [r1, r0]
 8003e72:	18c0      	addlt	r0, r0, r3
 8003e74:	4770      	bx	lr
	...

08003e78 <_sbrk>:
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <_sbrk+0x14>)
 8003e7a:	6819      	ldr	r1, [r3, #0]
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	b909      	cbnz	r1, 8003e84 <_sbrk+0xc>
 8003e80:	4903      	ldr	r1, [pc, #12]	; (8003e90 <_sbrk+0x18>)
 8003e82:	6019      	str	r1, [r3, #0]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	4402      	add	r2, r0
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	4770      	bx	lr
 8003e8c:	20000df0 	.word	0x20000df0
 8003e90:	20000efc 	.word	0x20000efc

08003e94 <_init>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	bf00      	nop
 8003e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9a:	bc08      	pop	{r3}
 8003e9c:	469e      	mov	lr, r3
 8003e9e:	4770      	bx	lr

08003ea0 <_fini>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	bf00      	nop
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr
